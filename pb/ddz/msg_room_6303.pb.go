// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_room_6303.proto

package ddz

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StageType int32

const (
	StageType_room_6303_reverse StageType = 0
	StageType_STAGE_READY       StageType = 1
	StageType_STAGE_BET         StageType = 2
	StageType_STAGE_DEAL        StageType = 3
	StageType_STAGE_SPRADE      StageType = 4
	StageType_STAGE_FINAL_ROUND StageType = 5
	StageType_STAGE_CHECK       StageType = 6
	StageType_STAGE_SETTLE      StageType = 7
)

var StageType_name = map[int32]string{
	0: "room_6303_reverse",
	1: "STAGE_READY",
	2: "STAGE_BET",
	3: "STAGE_DEAL",
	4: "STAGE_SPRADE",
	5: "STAGE_FINAL_ROUND",
	6: "STAGE_CHECK",
	7: "STAGE_SETTLE",
}
var StageType_value = map[string]int32{
	"room_6303_reverse": 0,
	"STAGE_READY":       1,
	"STAGE_BET":         2,
	"STAGE_DEAL":        3,
	"STAGE_SPRADE":      4,
	"STAGE_FINAL_ROUND": 5,
	"STAGE_CHECK":       6,
	"STAGE_SETTLE":      7,
}

func (x StageType) Enum() *StageType {
	p := new(StageType)
	*p = x
	return p
}
func (x StageType) String() string {
	return proto.EnumName(StageType_name, int32(x))
}
func (x *StageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StageType_value, data, "StageType")
	if err != nil {
		return err
	}
	*x = StageType(value)
	return nil
}
func (StageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{0}
}

type RoomCode int32

const (
	RoomCode_room_code_reverse RoomCode = 0
	RoomCode_LOW_CHIPS         RoomCode = 1
)

var RoomCode_name = map[int32]string{
	0: "room_code_reverse",
	1: "LOW_CHIPS",
}
var RoomCode_value = map[string]int32{
	"room_code_reverse": 0,
	"LOW_CHIPS":         1,
}

func (x RoomCode) Enum() *RoomCode {
	p := new(RoomCode)
	*p = x
	return p
}
func (x RoomCode) String() string {
	return proto.EnumName(RoomCode_name, int32(x))
}
func (x *RoomCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RoomCode_value, data, "RoomCode")
	if err != nil {
		return err
	}
	*x = RoomCode(value)
	return nil
}
func (RoomCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{1}
}

// 玩家操作类型
type OperationType int32

const (
	OperationType_pass OperationType = 0
	OperationType_doit OperationType = 1
)

var OperationType_name = map[int32]string{
	0: "pass",
	1: "doit",
}
var OperationType_value = map[string]int32{
	"pass": 0,
	"doit": 1,
}

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}
func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}
func (x *OperationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OperationType_value, data, "OperationType")
	if err != nil {
		return err
	}
	*x = OperationType(value)
	return nil
}
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{2}
}

type CARD_TYPE int32

const (
	CARD_TYPE_Notuse           CARD_TYPE = 0
	CARD_TYPE_ROCKET_TYPE      CARD_TYPE = 1
	CARD_TYPE_ZHADAN_TYPE      CARD_TYPE = 2
	CARD_TYPE_DOULEL_INK_TYPE  CARD_TYPE = 3
	CARD_TYPE_SINGLE_LINK_TYPE CARD_TYPE = 4
	CARD_TYPE_THREE_ONE_TYPE   CARD_TYPE = 5
	CARD_TYPE_THREE_TYPE       CARD_TYPE = 6
	CARD_TYPE_DOUBLE_TYPE      CARD_TYPE = 7
	CARD_TYPE_SINGLE_TYPE      CARD_TYPE = 8
)

var CARD_TYPE_name = map[int32]string{
	0: "Notuse",
	1: "ROCKET_TYPE",
	2: "ZHADAN_TYPE",
	3: "DOULEL_INK_TYPE",
	4: "SINGLE_LINK_TYPE",
	5: "THREE_ONE_TYPE",
	6: "THREE_TYPE",
	7: "DOUBLE_TYPE",
	8: "SINGLE_TYPE",
}
var CARD_TYPE_value = map[string]int32{
	"Notuse":           0,
	"ROCKET_TYPE":      1,
	"ZHADAN_TYPE":      2,
	"DOULEL_INK_TYPE":  3,
	"SINGLE_LINK_TYPE": 4,
	"THREE_ONE_TYPE":   5,
	"THREE_TYPE":       6,
	"DOUBLE_TYPE":      7,
	"SINGLE_TYPE":      8,
}

func (x CARD_TYPE) Enum() *CARD_TYPE {
	p := new(CARD_TYPE)
	*p = x
	return p
}
func (x CARD_TYPE) String() string {
	return proto.EnumName(CARD_TYPE_name, int32(x))
}
func (x *CARD_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CARD_TYPE_value, data, "CARD_TYPE")
	if err != nil {
		return err
	}
	*x = CARD_TYPE(value)
	return nil
}
func (CARD_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{3}
}

// 推送房间信息
type PushRoomInfo struct {
	SelfPos uint32    `protobuf:"varint,1,req,name=self_pos,json=selfPos" json:"self_pos"`
	Seats   *SeatInfo `protobuf:"bytes,2,req,name=seats" json:"seats,omitempty"`
}

func (m *PushRoomInfo) Reset()         { *m = PushRoomInfo{} }
func (m *PushRoomInfo) String() string { return proto.CompactTextString(m) }
func (*PushRoomInfo) ProtoMessage()    {}
func (*PushRoomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{0}
}
func (m *PushRoomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushRoomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushRoomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PushRoomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRoomInfo.Merge(dst, src)
}
func (m *PushRoomInfo) XXX_Size() int {
	return m.Size()
}
func (m *PushRoomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRoomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PushRoomInfo proto.InternalMessageInfo

func (m *PushRoomInfo) GetSelfPos() uint32 {
	if m != nil {
		return m.SelfPos
	}
	return 0
}

func (m *PushRoomInfo) GetSeats() *SeatInfo {
	if m != nil {
		return m.Seats
	}
	return nil
}

// 座位信息
type SeatInfo struct {
	Pos         uint32   `protobuf:"varint,1,req,name=pos" json:"pos"`
	Nickname    string   `protobuf:"bytes,2,req,name=nickname" json:"nickname"`
	Chips       uint64   `protobuf:"varint,3,req,name=chips" json:"chips"`
	Avatar      uint32   `protobuf:"varint,4,req,name=avatar" json:"avatar"`
	Sex         RoleSex  `protobuf:"varint,5,req,name=sex,enum=ddz.RoleSex" json:"sex"`
	Cards       []uint32 `protobuf:"varint,6,rep,name=cards" json:"cards,omitempty"`
	CardType    uint32   `protobuf:"varint,7,opt,name=card_type,json=cardType" json:"card_type"`
	CurrChips   uint32   `protobuf:"varint,8,opt,name=curr_chips,json=currChips" json:"curr_chips"`
	Profit      int64    `protobuf:"varint,9,opt,name=profit" json:"profit"`
	IsDiscard   bool     `protobuf:"varint,10,opt,name=is_discard,json=isDiscard" json:"is_discard"`
	IsShowhand  bool     `protobuf:"varint,11,opt,name=is_showhand,json=isShowhand" json:"is_showhand"`
	SpradeIndex uint32   `protobuf:"varint,12,opt,name=sprade_index,json=spradeIndex" json:"sprade_index"`
}

func (m *SeatInfo) Reset()         { *m = SeatInfo{} }
func (m *SeatInfo) String() string { return proto.CompactTextString(m) }
func (*SeatInfo) ProtoMessage()    {}
func (*SeatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{1}
}
func (m *SeatInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeatInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SeatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeatInfo.Merge(dst, src)
}
func (m *SeatInfo) XXX_Size() int {
	return m.Size()
}
func (m *SeatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SeatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SeatInfo proto.InternalMessageInfo

func (m *SeatInfo) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SeatInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SeatInfo) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *SeatInfo) GetAvatar() uint32 {
	if m != nil {
		return m.Avatar
	}
	return 0
}

func (m *SeatInfo) GetSex() RoleSex {
	if m != nil {
		return m.Sex
	}
	return RoleSex_man
}

func (m *SeatInfo) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *SeatInfo) GetCardType() uint32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *SeatInfo) GetCurrChips() uint32 {
	if m != nil {
		return m.CurrChips
	}
	return 0
}

func (m *SeatInfo) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *SeatInfo) GetIsDiscard() bool {
	if m != nil {
		return m.IsDiscard
	}
	return false
}

func (m *SeatInfo) GetIsShowhand() bool {
	if m != nil {
		return m.IsShowhand
	}
	return false
}

func (m *SeatInfo) GetSpradeIndex() uint32 {
	if m != nil {
		return m.SpradeIndex
	}
	return 0
}

// 发牌信息
type CardInfo struct {
	Pos      uint32   `protobuf:"varint,1,req,name=pos" json:"pos"`
	Cards    []uint32 `protobuf:"varint,2,rep,name=cards" json:"cards,omitempty"`
	CardType uint32   `protobuf:"varint,3,opt,name=card_type,json=cardType" json:"card_type"`
}

func (m *CardInfo) Reset()         { *m = CardInfo{} }
func (m *CardInfo) String() string { return proto.CompactTextString(m) }
func (*CardInfo) ProtoMessage()    {}
func (*CardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{2}
}
func (m *CardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardInfo.Merge(dst, src)
}
func (m *CardInfo) XXX_Size() int {
	return m.Size()
}
func (m *CardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CardInfo proto.InternalMessageInfo

func (m *CardInfo) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *CardInfo) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *CardInfo) GetCardType() uint32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

type BaseChipsPush struct {
	Info []*ChipsInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *BaseChipsPush) Reset()         { *m = BaseChipsPush{} }
func (m *BaseChipsPush) String() string { return proto.CompactTextString(m) }
func (*BaseChipsPush) ProtoMessage()    {}
func (*BaseChipsPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{3}
}
func (m *BaseChipsPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseChipsPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseChipsPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseChipsPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseChipsPush.Merge(dst, src)
}
func (m *BaseChipsPush) XXX_Size() int {
	return m.Size()
}
func (m *BaseChipsPush) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseChipsPush.DiscardUnknown(m)
}

var xxx_messageInfo_BaseChipsPush proto.InternalMessageInfo

func (m *BaseChipsPush) GetInfo() []*ChipsInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 发牌
type DealCardsPush struct {
	Info []*CardInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *DealCardsPush) Reset()         { *m = DealCardsPush{} }
func (m *DealCardsPush) String() string { return proto.CompactTextString(m) }
func (*DealCardsPush) ProtoMessage()    {}
func (*DealCardsPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{4}
}
func (m *DealCardsPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DealCardsPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DealCardsPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DealCardsPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DealCardsPush.Merge(dst, src)
}
func (m *DealCardsPush) XXX_Size() int {
	return m.Size()
}
func (m *DealCardsPush) XXX_DiscardUnknown() {
	xxx_messageInfo_DealCardsPush.DiscardUnknown(m)
}

var xxx_messageInfo_DealCardsPush proto.InternalMessageInfo

func (m *DealCardsPush) GetInfo() []*CardInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 翻牌阶段,发最后一张牌, 弃牌玩家没数据
type FinalDealResp struct {
	Cards     uint32 `protobuf:"varint,1,opt,name=cards" json:"cards"`
	FirstCard uint32 `protobuf:"varint,2,opt,name=first_card,json=firstCard" json:"first_card"`
}

func (m *FinalDealResp) Reset()         { *m = FinalDealResp{} }
func (m *FinalDealResp) String() string { return proto.CompactTextString(m) }
func (*FinalDealResp) ProtoMessage()    {}
func (*FinalDealResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{5}
}
func (m *FinalDealResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalDealResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalDealResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FinalDealResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalDealResp.Merge(dst, src)
}
func (m *FinalDealResp) XXX_Size() int {
	return m.Size()
}
func (m *FinalDealResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalDealResp.DiscardUnknown(m)
}

var xxx_messageInfo_FinalDealResp proto.InternalMessageInfo

func (m *FinalDealResp) GetCards() uint32 {
	if m != nil {
		return m.Cards
	}
	return 0
}

func (m *FinalDealResp) GetFirstCard() uint32 {
	if m != nil {
		return m.FirstCard
	}
	return 0
}

// 翻牌信息
type SpreadInfo struct {
	Pos   uint32 `protobuf:"varint,1,req,name=pos" json:"pos"`
	Index uint32 `protobuf:"varint,2,req,name=index" json:"index"`
	Cards uint32 `protobuf:"varint,3,req,name=cards" json:"cards"`
}

func (m *SpreadInfo) Reset()         { *m = SpreadInfo{} }
func (m *SpreadInfo) String() string { return proto.CompactTextString(m) }
func (*SpreadInfo) ProtoMessage()    {}
func (*SpreadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{6}
}
func (m *SpreadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SpreadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadInfo.Merge(dst, src)
}
func (m *SpreadInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpreadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadInfo proto.InternalMessageInfo

func (m *SpreadInfo) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SpreadInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SpreadInfo) GetCards() uint32 {
	if m != nil {
		return m.Cards
	}
	return 0
}

// 翻牌阶段,翻牌数据
type SpreadCardsPush struct {
	Info []*SpreadInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *SpreadCardsPush) Reset()         { *m = SpreadCardsPush{} }
func (m *SpreadCardsPush) String() string { return proto.CompactTextString(m) }
func (*SpreadCardsPush) ProtoMessage()    {}
func (*SpreadCardsPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{7}
}
func (m *SpreadCardsPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadCardsPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadCardsPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SpreadCardsPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadCardsPush.Merge(dst, src)
}
func (m *SpreadCardsPush) XXX_Size() int {
	return m.Size()
}
func (m *SpreadCardsPush) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadCardsPush.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadCardsPush proto.InternalMessageInfo

func (m *SpreadCardsPush) GetInfo() []*SpreadInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 比牌阶段,翻开最后一张牌
type CheckCardsPush struct {
	Info []*CardInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *CheckCardsPush) Reset()         { *m = CheckCardsPush{} }
func (m *CheckCardsPush) String() string { return proto.CompactTextString(m) }
func (*CheckCardsPush) ProtoMessage()    {}
func (*CheckCardsPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{8}
}
func (m *CheckCardsPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckCardsPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckCardsPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckCardsPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCardsPush.Merge(dst, src)
}
func (m *CheckCardsPush) XXX_Size() int {
	return m.Size()
}
func (m *CheckCardsPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCardsPush.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCardsPush proto.InternalMessageInfo

func (m *CheckCardsPush) GetInfo() []*CardInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 推送所有人: 阶段操作
type StagePush struct {
	RoundTime uint32 `protobuf:"varint,2,req,name=round_time,json=roundTime" json:"round_time"`
	CurrPos   uint32 `protobuf:"varint,3,opt,name=curr_pos,json=currPos" json:"curr_pos"`
}

func (m *StagePush) Reset()         { *m = StagePush{} }
func (m *StagePush) String() string { return proto.CompactTextString(m) }
func (*StagePush) ProtoMessage()    {}
func (*StagePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{9}
}
func (m *StagePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StagePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StagePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StagePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StagePush.Merge(dst, src)
}
func (m *StagePush) XXX_Size() int {
	return m.Size()
}
func (m *StagePush) XXX_DiscardUnknown() {
	xxx_messageInfo_StagePush.DiscardUnknown(m)
}

var xxx_messageInfo_StagePush proto.InternalMessageInfo

func (m *StagePush) GetRoundTime() uint32 {
	if m != nil {
		return m.RoundTime
	}
	return 0
}

func (m *StagePush) GetCurrPos() uint32 {
	if m != nil {
		return m.CurrPos
	}
	return 0
}

// 抢地主
type RobBankerOper struct {
	CurrPos   uint32 `protobuf:"varint,1,req,name=curr_pos,json=currPos" json:"curr_pos"`
	RoundTime uint32 `protobuf:"varint,2,req,name=round_time,json=roundTime" json:"round_time"`
}

func (m *RobBankerOper) Reset()         { *m = RobBankerOper{} }
func (m *RobBankerOper) String() string { return proto.CompactTextString(m) }
func (*RobBankerOper) ProtoMessage()    {}
func (*RobBankerOper) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{10}
}
func (m *RobBankerOper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobBankerOper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobBankerOper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RobBankerOper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobBankerOper.Merge(dst, src)
}
func (m *RobBankerOper) XXX_Size() int {
	return m.Size()
}
func (m *RobBankerOper) XXX_DiscardUnknown() {
	xxx_messageInfo_RobBankerOper.DiscardUnknown(m)
}

var xxx_messageInfo_RobBankerOper proto.InternalMessageInfo

func (m *RobBankerOper) GetCurrPos() uint32 {
	if m != nil {
		return m.CurrPos
	}
	return 0
}

func (m *RobBankerOper) GetRoundTime() uint32 {
	if m != nil {
		return m.RoundTime
	}
	return 0
}

type RobBankerResp struct {
	CurrPos uint32 `protobuf:"varint,1,req,name=curr_pos,json=currPos" json:"curr_pos"`
	SureRob bool   `protobuf:"varint,2,req,name=sure_rob,json=sureRob" json:"sure_rob"`
}

func (m *RobBankerResp) Reset()         { *m = RobBankerResp{} }
func (m *RobBankerResp) String() string { return proto.CompactTextString(m) }
func (*RobBankerResp) ProtoMessage()    {}
func (*RobBankerResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{11}
}
func (m *RobBankerResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobBankerResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobBankerResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RobBankerResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobBankerResp.Merge(dst, src)
}
func (m *RobBankerResp) XXX_Size() int {
	return m.Size()
}
func (m *RobBankerResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RobBankerResp.DiscardUnknown(m)
}

var xxx_messageInfo_RobBankerResp proto.InternalMessageInfo

func (m *RobBankerResp) GetCurrPos() uint32 {
	if m != nil {
		return m.CurrPos
	}
	return 0
}

func (m *RobBankerResp) GetSureRob() bool {
	if m != nil {
		return m.SureRob
	}
	return false
}

// 服务端推送3张底牌给地主
type DipaiPush struct {
	CurrPos uint32   `protobuf:"varint,1,req,name=curr_pos,json=currPos" json:"curr_pos"`
	Cards   []uint32 `protobuf:"varint,2,rep,name=cards" json:"cards,omitempty"`
}

func (m *DipaiPush) Reset()         { *m = DipaiPush{} }
func (m *DipaiPush) String() string { return proto.CompactTextString(m) }
func (*DipaiPush) ProtoMessage()    {}
func (*DipaiPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{12}
}
func (m *DipaiPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DipaiPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DipaiPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DipaiPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DipaiPush.Merge(dst, src)
}
func (m *DipaiPush) XXX_Size() int {
	return m.Size()
}
func (m *DipaiPush) XXX_DiscardUnknown() {
	xxx_messageInfo_DipaiPush.DiscardUnknown(m)
}

var xxx_messageInfo_DipaiPush proto.InternalMessageInfo

func (m *DipaiPush) GetCurrPos() uint32 {
	if m != nil {
		return m.CurrPos
	}
	return 0
}

func (m *DipaiPush) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

type CardData struct {
	Cardtype  uint32 `protobuf:"varint,1,opt,name=cardtype" json:"cardtype"`
	Cardvalue uint32 `protobuf:"varint,2,opt,name=cardvalue" json:"cardvalue"`
	Extra     uint32 `protobuf:"varint,3,opt,name=extra" json:"extra"`
}

func (m *CardData) Reset()         { *m = CardData{} }
func (m *CardData) String() string { return proto.CompactTextString(m) }
func (*CardData) ProtoMessage()    {}
func (*CardData) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{13}
}
func (m *CardData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CardData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardData.Merge(dst, src)
}
func (m *CardData) XXX_Size() int {
	return m.Size()
}
func (m *CardData) XXX_DiscardUnknown() {
	xxx_messageInfo_CardData.DiscardUnknown(m)
}

var xxx_messageInfo_CardData proto.InternalMessageInfo

func (m *CardData) GetCardtype() uint32 {
	if m != nil {
		return m.Cardtype
	}
	return 0
}

func (m *CardData) GetCardvalue() uint32 {
	if m != nil {
		return m.Cardvalue
	}
	return 0
}

func (m *CardData) GetExtra() uint32 {
	if m != nil {
		return m.Extra
	}
	return 0
}

// 玩家的操作 请求
type OperationReq struct {
	Pos       uint32        `protobuf:"varint,1,opt,name=pos" json:"pos"`
	Operation OperationType `protobuf:"varint,2,req,name=operation,enum=ddz.OperationType" json:"operation"`
	Data      *CardData     `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Nocards   bool          `protobuf:"varint,4,opt,name=nocards" json:"nocards"`
}

func (m *OperationReq) Reset()         { *m = OperationReq{} }
func (m *OperationReq) String() string { return proto.CompactTextString(m) }
func (*OperationReq) ProtoMessage()    {}
func (*OperationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{14}
}
func (m *OperationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OperationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationReq.Merge(dst, src)
}
func (m *OperationReq) XXX_Size() int {
	return m.Size()
}
func (m *OperationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationReq.DiscardUnknown(m)
}

var xxx_messageInfo_OperationReq proto.InternalMessageInfo

func (m *OperationReq) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *OperationReq) GetOperation() OperationType {
	if m != nil {
		return m.Operation
	}
	return OperationType_pass
}

func (m *OperationReq) GetData() *CardData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *OperationReq) GetNocards() bool {
	if m != nil {
		return m.Nocards
	}
	return false
}

// 推送玩家操作
type PushPosOperation struct {
	Pos       uint32        `protobuf:"varint,1,opt,name=pos" json:"pos"`
	Operation OperationType `protobuf:"varint,2,req,name=operation,enum=ddz.OperationType" json:"operation"`
	Data      *CardData     `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Nocards   bool          `protobuf:"varint,4,opt,name=nocards" json:"nocards"`
}

func (m *PushPosOperation) Reset()         { *m = PushPosOperation{} }
func (m *PushPosOperation) String() string { return proto.CompactTextString(m) }
func (*PushPosOperation) ProtoMessage()    {}
func (*PushPosOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{15}
}
func (m *PushPosOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPosOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPosOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PushPosOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPosOperation.Merge(dst, src)
}
func (m *PushPosOperation) XXX_Size() int {
	return m.Size()
}
func (m *PushPosOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPosOperation.DiscardUnknown(m)
}

var xxx_messageInfo_PushPosOperation proto.InternalMessageInfo

func (m *PushPosOperation) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *PushPosOperation) GetOperation() OperationType {
	if m != nil {
		return m.Operation
	}
	return OperationType_pass
}

func (m *PushPosOperation) GetData() *CardData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushPosOperation) GetNocards() bool {
	if m != nil {
		return m.Nocards
	}
	return false
}

// 推送游戏结束
type GameoverPush struct {
	DizhuWin bool `protobuf:"varint,1,opt,name=dizhu_win,json=dizhuWin" json:"dizhu_win"`
}

func (m *GameoverPush) Reset()         { *m = GameoverPush{} }
func (m *GameoverPush) String() string { return proto.CompactTextString(m) }
func (*GameoverPush) ProtoMessage()    {}
func (*GameoverPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{16}
}
func (m *GameoverPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameoverPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameoverPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GameoverPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameoverPush.Merge(dst, src)
}
func (m *GameoverPush) XXX_Size() int {
	return m.Size()
}
func (m *GameoverPush) XXX_DiscardUnknown() {
	xxx_messageInfo_GameoverPush.DiscardUnknown(m)
}

var xxx_messageInfo_GameoverPush proto.InternalMessageInfo

func (m *GameoverPush) GetDizhuWin() bool {
	if m != nil {
		return m.DizhuWin
	}
	return false
}

// 金额信息
type ChipsInfo struct {
	Pos    uint32 `protobuf:"varint,1,req,name=pos" json:"pos"`
	Chips  uint64 `protobuf:"varint,2,req,name=chips" json:"chips"`
	Profit int64  `protobuf:"varint,3,req,name=profit" json:"profit"`
}

func (m *ChipsInfo) Reset()         { *m = ChipsInfo{} }
func (m *ChipsInfo) String() string { return proto.CompactTextString(m) }
func (*ChipsInfo) ProtoMessage()    {}
func (*ChipsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{17}
}
func (m *ChipsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChipsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChipsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChipsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChipsInfo.Merge(dst, src)
}
func (m *ChipsInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChipsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChipsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChipsInfo proto.InternalMessageInfo

func (m *ChipsInfo) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *ChipsInfo) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *ChipsInfo) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

// 结算收益
type SettleChipsPush struct {
	Info []*ChipsInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *SettleChipsPush) Reset()         { *m = SettleChipsPush{} }
func (m *SettleChipsPush) String() string { return proto.CompactTextString(m) }
func (*SettleChipsPush) ProtoMessage()    {}
func (*SettleChipsPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{18}
}
func (m *SettleChipsPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettleChipsPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettleChipsPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SettleChipsPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleChipsPush.Merge(dst, src)
}
func (m *SettleChipsPush) XXX_Size() int {
	return m.Size()
}
func (m *SettleChipsPush) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleChipsPush.DiscardUnknown(m)
}

var xxx_messageInfo_SettleChipsPush proto.InternalMessageInfo

func (m *SettleChipsPush) GetInfo() []*ChipsInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 离开房间
type LeaveRoomPush struct {
	Pos uint32 `protobuf:"varint,1,req,name=pos" json:"pos"`
}

func (m *LeaveRoomPush) Reset()         { *m = LeaveRoomPush{} }
func (m *LeaveRoomPush) String() string { return proto.CompactTextString(m) }
func (*LeaveRoomPush) ProtoMessage()    {}
func (*LeaveRoomPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{19}
}
func (m *LeaveRoomPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveRoomPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveRoomPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LeaveRoomPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveRoomPush.Merge(dst, src)
}
func (m *LeaveRoomPush) XXX_Size() int {
	return m.Size()
}
func (m *LeaveRoomPush) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveRoomPush.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveRoomPush proto.InternalMessageInfo

func (m *LeaveRoomPush) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type ReloginInfoResp struct {
	Pos          uint32      `protobuf:"varint,1,req,name=pos" json:"pos"`
	Stage        StageType   `protobuf:"varint,2,req,name=stage,enum=ddz.StageType" json:"stage"`
	RoundTime    uint32      `protobuf:"varint,3,req,name=round_time,json=roundTime" json:"round_time"`
	CurrPos      uint32      `protobuf:"varint,4,opt,name=curr_pos,json=currPos" json:"curr_pos"`
	Seats        []*SeatInfo `protobuf:"bytes,5,rep,name=seats" json:"seats,omitempty"`
	Ante         uint32      `protobuf:"varint,6,req,name=ante" json:"ante"`
	RaiseMulti   uint32      `protobuf:"varint,7,req,name=raise_multi,json=raiseMulti" json:"raise_multi"`
	AllCurrChips uint64      `protobuf:"varint,8,req,name=all_curr_chips,json=allCurrChips" json:"all_curr_chips"`
	Round        uint32      `protobuf:"varint,9,req,name=round" json:"round"`
	HideCards    []uint32    `protobuf:"varint,10,rep,name=hide_cards,json=hideCards" json:"hide_cards,omitempty"`
}

func (m *ReloginInfoResp) Reset()         { *m = ReloginInfoResp{} }
func (m *ReloginInfoResp) String() string { return proto.CompactTextString(m) }
func (*ReloginInfoResp) ProtoMessage()    {}
func (*ReloginInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{20}
}
func (m *ReloginInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReloginInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReloginInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ReloginInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloginInfoResp.Merge(dst, src)
}
func (m *ReloginInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *ReloginInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloginInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReloginInfoResp proto.InternalMessageInfo

func (m *ReloginInfoResp) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *ReloginInfoResp) GetStage() StageType {
	if m != nil {
		return m.Stage
	}
	return StageType_room_6303_reverse
}

func (m *ReloginInfoResp) GetRoundTime() uint32 {
	if m != nil {
		return m.RoundTime
	}
	return 0
}

func (m *ReloginInfoResp) GetCurrPos() uint32 {
	if m != nil {
		return m.CurrPos
	}
	return 0
}

func (m *ReloginInfoResp) GetSeats() []*SeatInfo {
	if m != nil {
		return m.Seats
	}
	return nil
}

func (m *ReloginInfoResp) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *ReloginInfoResp) GetRaiseMulti() uint32 {
	if m != nil {
		return m.RaiseMulti
	}
	return 0
}

func (m *ReloginInfoResp) GetAllCurrChips() uint64 {
	if m != nil {
		return m.AllCurrChips
	}
	return 0
}

func (m *ReloginInfoResp) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReloginInfoResp) GetHideCards() []uint32 {
	if m != nil {
		return m.HideCards
	}
	return nil
}

// 信息
type RoomCodeResp struct {
	Code RoomCode `protobuf:"varint,1,req,name=code,enum=ddz.RoomCode" json:"code"`
}

func (m *RoomCodeResp) Reset()         { *m = RoomCodeResp{} }
func (m *RoomCodeResp) String() string { return proto.CompactTextString(m) }
func (*RoomCodeResp) ProtoMessage()    {}
func (*RoomCodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{21}
}
func (m *RoomCodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomCodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomCodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomCodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomCodeResp.Merge(dst, src)
}
func (m *RoomCodeResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomCodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomCodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomCodeResp proto.InternalMessageInfo

func (m *RoomCodeResp) GetCode() RoomCode {
	if m != nil {
		return m.Code
	}
	return RoomCode_room_code_reverse
}

type LookResp struct {
	Card uint32 `protobuf:"varint,6,req,name=card" json:"card"`
}

func (m *LookResp) Reset()         { *m = LookResp{} }
func (m *LookResp) String() string { return proto.CompactTextString(m) }
func (*LookResp) ProtoMessage()    {}
func (*LookResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6303_9a091c8f3ec67678, []int{22}
}
func (m *LookResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LookResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookResp.Merge(dst, src)
}
func (m *LookResp) XXX_Size() int {
	return m.Size()
}
func (m *LookResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LookResp.DiscardUnknown(m)
}

var xxx_messageInfo_LookResp proto.InternalMessageInfo

func (m *LookResp) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func init() {
	proto.RegisterType((*PushRoomInfo)(nil), "ddz.PushRoomInfo")
	proto.RegisterType((*SeatInfo)(nil), "ddz.SeatInfo")
	proto.RegisterType((*CardInfo)(nil), "ddz.CardInfo")
	proto.RegisterType((*BaseChipsPush)(nil), "ddz.BaseChipsPush")
	proto.RegisterType((*DealCardsPush)(nil), "ddz.DealCardsPush")
	proto.RegisterType((*FinalDealResp)(nil), "ddz.FinalDealResp")
	proto.RegisterType((*SpreadInfo)(nil), "ddz.SpreadInfo")
	proto.RegisterType((*SpreadCardsPush)(nil), "ddz.SpreadCardsPush")
	proto.RegisterType((*CheckCardsPush)(nil), "ddz.CheckCardsPush")
	proto.RegisterType((*StagePush)(nil), "ddz.StagePush")
	proto.RegisterType((*RobBankerOper)(nil), "ddz.RobBankerOper")
	proto.RegisterType((*RobBankerResp)(nil), "ddz.RobBankerResp")
	proto.RegisterType((*DipaiPush)(nil), "ddz.DipaiPush")
	proto.RegisterType((*CardData)(nil), "ddz.CardData")
	proto.RegisterType((*OperationReq)(nil), "ddz.OperationReq")
	proto.RegisterType((*PushPosOperation)(nil), "ddz.PushPosOperation")
	proto.RegisterType((*GameoverPush)(nil), "ddz.GameoverPush")
	proto.RegisterType((*ChipsInfo)(nil), "ddz.ChipsInfo")
	proto.RegisterType((*SettleChipsPush)(nil), "ddz.SettleChipsPush")
	proto.RegisterType((*LeaveRoomPush)(nil), "ddz.LeaveRoomPush")
	proto.RegisterType((*ReloginInfoResp)(nil), "ddz.ReloginInfoResp")
	proto.RegisterType((*RoomCodeResp)(nil), "ddz.RoomCodeResp")
	proto.RegisterType((*LookResp)(nil), "ddz.LookResp")
	proto.RegisterEnum("ddz.StageType", StageType_name, StageType_value)
	proto.RegisterEnum("ddz.RoomCode", RoomCode_name, RoomCode_value)
	proto.RegisterEnum("ddz.OperationType", OperationType_name, OperationType_value)
	proto.RegisterEnum("ddz.CARD_TYPE", CARD_TYPE_name, CARD_TYPE_value)
}
func (m *PushRoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushRoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.SelfPos))
	if m.Seats == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("seats")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Seats.Size()))
		n1, err := m.Seats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SeatInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeatInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(len(m.Nickname)))
	i += copy(dAtA[i:], m.Nickname)
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Chips))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Avatar))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Sex))
	if len(m.Cards) > 0 {
		for _, num := range m.Cards {
			dAtA[i] = 0x30
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.CardType))
	dAtA[i] = 0x40
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.CurrChips))
	dAtA[i] = 0x48
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Profit))
	dAtA[i] = 0x50
	i++
	if m.IsDiscard {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x58
	i++
	if m.IsShowhand {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x60
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.SpradeIndex))
	return i, nil
}

func (m *CardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Pos))
	if len(m.Cards) > 0 {
		for _, num := range m.Cards {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.CardType))
	return i, nil
}

func (m *BaseChipsPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseChipsPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DealCardsPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DealCardsPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FinalDealResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalDealResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Cards))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.FirstCard))
	return i, nil
}

func (m *SpreadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Index))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Cards))
	return i, nil
}

func (m *SpreadCardsPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadCardsPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CheckCardsPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckCardsPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StagePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StagePush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.RoundTime))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.CurrPos))
	return i, nil
}

func (m *RobBankerOper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobBankerOper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.CurrPos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.RoundTime))
	return i, nil
}

func (m *RobBankerResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobBankerResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.CurrPos))
	dAtA[i] = 0x10
	i++
	if m.SureRob {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *DipaiPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DipaiPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.CurrPos))
	if len(m.Cards) > 0 {
		for _, num := range m.Cards {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *CardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Cardtype))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Cardvalue))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Extra))
	return i, nil
}

func (m *OperationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Operation))
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	dAtA[i] = 0x20
	i++
	if m.Nocards {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *PushPosOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPosOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Operation))
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	dAtA[i] = 0x20
	i++
	if m.Nocards {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *GameoverPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameoverPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.DizhuWin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ChipsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChipsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Chips))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Profit))
	return i, nil
}

func (m *SettleChipsPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleChipsPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LeaveRoomPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveRoomPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Pos))
	return i, nil
}

func (m *ReloginInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReloginInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Stage))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.RoundTime))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.CurrPos))
	if len(m.Seats) > 0 {
		for _, msg := range m.Seats {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Ante))
	dAtA[i] = 0x38
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.RaiseMulti))
	dAtA[i] = 0x40
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.AllCurrChips))
	dAtA[i] = 0x48
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Round))
	if len(m.HideCards) > 0 {
		for _, num := range m.HideCards {
			dAtA[i] = 0x50
			i++
			i = encodeVarintMsgRoom_6303(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *RoomCodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomCodeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Code))
	return i, nil
}

func (m *LookResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x30
	i++
	i = encodeVarintMsgRoom_6303(dAtA, i, uint64(m.Card))
	return i, nil
}

func encodeVarintMsgRoom_6303(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PushRoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.SelfPos))
	if m.Seats != nil {
		l = m.Seats.Size()
		n += 1 + l + sovMsgRoom_6303(uint64(l))
	}
	return n
}

func (m *SeatInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Pos))
	l = len(m.Nickname)
	n += 1 + l + sovMsgRoom_6303(uint64(l))
	n += 1 + sovMsgRoom_6303(uint64(m.Chips))
	n += 1 + sovMsgRoom_6303(uint64(m.Avatar))
	n += 1 + sovMsgRoom_6303(uint64(m.Sex))
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			n += 1 + sovMsgRoom_6303(uint64(e))
		}
	}
	n += 1 + sovMsgRoom_6303(uint64(m.CardType))
	n += 1 + sovMsgRoom_6303(uint64(m.CurrChips))
	n += 1 + sovMsgRoom_6303(uint64(m.Profit))
	n += 2
	n += 2
	n += 1 + sovMsgRoom_6303(uint64(m.SpradeIndex))
	return n
}

func (m *CardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Pos))
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			n += 1 + sovMsgRoom_6303(uint64(e))
		}
	}
	n += 1 + sovMsgRoom_6303(uint64(m.CardType))
	return n
}

func (m *BaseChipsPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6303(uint64(l))
		}
	}
	return n
}

func (m *DealCardsPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6303(uint64(l))
		}
	}
	return n
}

func (m *FinalDealResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Cards))
	n += 1 + sovMsgRoom_6303(uint64(m.FirstCard))
	return n
}

func (m *SpreadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Pos))
	n += 1 + sovMsgRoom_6303(uint64(m.Index))
	n += 1 + sovMsgRoom_6303(uint64(m.Cards))
	return n
}

func (m *SpreadCardsPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6303(uint64(l))
		}
	}
	return n
}

func (m *CheckCardsPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6303(uint64(l))
		}
	}
	return n
}

func (m *StagePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.RoundTime))
	n += 1 + sovMsgRoom_6303(uint64(m.CurrPos))
	return n
}

func (m *RobBankerOper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.CurrPos))
	n += 1 + sovMsgRoom_6303(uint64(m.RoundTime))
	return n
}

func (m *RobBankerResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.CurrPos))
	n += 2
	return n
}

func (m *DipaiPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.CurrPos))
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			n += 1 + sovMsgRoom_6303(uint64(e))
		}
	}
	return n
}

func (m *CardData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Cardtype))
	n += 1 + sovMsgRoom_6303(uint64(m.Cardvalue))
	n += 1 + sovMsgRoom_6303(uint64(m.Extra))
	return n
}

func (m *OperationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Pos))
	n += 1 + sovMsgRoom_6303(uint64(m.Operation))
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMsgRoom_6303(uint64(l))
	}
	n += 2
	return n
}

func (m *PushPosOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Pos))
	n += 1 + sovMsgRoom_6303(uint64(m.Operation))
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMsgRoom_6303(uint64(l))
	}
	n += 2
	return n
}

func (m *GameoverPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *ChipsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Pos))
	n += 1 + sovMsgRoom_6303(uint64(m.Chips))
	n += 1 + sovMsgRoom_6303(uint64(m.Profit))
	return n
}

func (m *SettleChipsPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6303(uint64(l))
		}
	}
	return n
}

func (m *LeaveRoomPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Pos))
	return n
}

func (m *ReloginInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Pos))
	n += 1 + sovMsgRoom_6303(uint64(m.Stage))
	n += 1 + sovMsgRoom_6303(uint64(m.RoundTime))
	n += 1 + sovMsgRoom_6303(uint64(m.CurrPos))
	if len(m.Seats) > 0 {
		for _, e := range m.Seats {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6303(uint64(l))
		}
	}
	n += 1 + sovMsgRoom_6303(uint64(m.Ante))
	n += 1 + sovMsgRoom_6303(uint64(m.RaiseMulti))
	n += 1 + sovMsgRoom_6303(uint64(m.AllCurrChips))
	n += 1 + sovMsgRoom_6303(uint64(m.Round))
	if len(m.HideCards) > 0 {
		for _, e := range m.HideCards {
			n += 1 + sovMsgRoom_6303(uint64(e))
		}
	}
	return n
}

func (m *RoomCodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Code))
	return n
}

func (m *LookResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6303(uint64(m.Card))
	return n
}

func sovMsgRoom_6303(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgRoom_6303(x uint64) (n int) {
	return sovMsgRoom_6303(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PushRoomInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushRoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushRoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfPos", wireType)
			}
			m.SelfPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfPos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Seats == nil {
				m.Seats = &SeatInfo{}
			}
			if err := m.Seats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("self_pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("seats")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeatInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeatInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeatInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chips", wireType)
			}
			m.Chips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chips |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			m.Avatar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avatar |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (RoleSex(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6303
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6303
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgRoom_6303
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cards) == 0 {
					m.Cards = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgRoom_6303
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrChips", wireType)
			}
			m.CurrChips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrChips |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDiscard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDiscard = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowhand", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShowhand = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpradeIndex", wireType)
			}
			m.SpradeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpradeIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nickname")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("chips")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("avatar")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sex")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6303
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6303
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgRoom_6303
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cards) == 0 {
					m.Cards = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgRoom_6303
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseChipsPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseChipsPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseChipsPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &ChipsInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DealCardsPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DealCardsPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DealCardsPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &CardInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalDealResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalDealResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalDealResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			m.Cards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cards |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstCard", wireType)
			}
			m.FirstCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstCard |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpreadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpreadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			m.Cards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cards |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("index")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cards")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadCardsPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpreadCardsPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpreadCardsPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &SpreadInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckCardsPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckCardsPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckCardsPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &CardInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StagePush) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StagePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StagePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTime", wireType)
			}
			m.RoundTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrPos", wireType)
			}
			m.CurrPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrPos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("round_time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobBankerOper) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobBankerOper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobBankerOper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrPos", wireType)
			}
			m.CurrPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrPos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTime", wireType)
			}
			m.RoundTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("curr_pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("round_time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobBankerResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobBankerResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobBankerResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrPos", wireType)
			}
			m.CurrPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrPos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SureRob", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SureRob = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("curr_pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sure_rob")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DipaiPush) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DipaiPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DipaiPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrPos", wireType)
			}
			m.CurrPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrPos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6303
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6303
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgRoom_6303
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cards) == 0 {
					m.Cards = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgRoom_6303
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("curr_pos")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardtype", wireType)
			}
			m.Cardtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cardtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardvalue", wireType)
			}
			m.Cardvalue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cardvalue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			m.Extra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Extra |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= (OperationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CardData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nocards", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nocards = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("operation")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPosOperation) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPosOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPosOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= (OperationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CardData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nocards", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nocards = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("operation")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameoverPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameoverPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameoverPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DizhuWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DizhuWin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChipsInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChipsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChipsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chips", wireType)
			}
			m.Chips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chips |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("chips")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("profit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleChipsPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleChipsPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleChipsPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &ChipsInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveRoomPush) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveRoomPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveRoomPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReloginInfoResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReloginInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReloginInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (StageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTime", wireType)
			}
			m.RoundTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrPos", wireType)
			}
			m.CurrPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrPos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seats = append(m.Seats, &SeatInfo{})
			if err := m.Seats[len(m.Seats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaiseMulti", wireType)
			}
			m.RaiseMulti = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaiseMulti |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCurrChips", wireType)
			}
			m.AllCurrChips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllCurrChips |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6303
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HideCards = append(m.HideCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6303
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgRoom_6303
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.HideCards) == 0 {
					m.HideCards = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgRoom_6303
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HideCards = append(m.HideCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HideCards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("stage")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("round_time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ante")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("raise_multi")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("all_curr_chips")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("round")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomCodeResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomCodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomCodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (RoomCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("code")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6303(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6303
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("card")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgRoom_6303(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgRoom_6303
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRoom_6303
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsgRoom_6303
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgRoom_6303
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgRoom_6303(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgRoom_6303 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgRoom_6303   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg_room_6303.proto", fileDescriptor_msg_room_6303_9a091c8f3ec67678) }

var fileDescriptor_msg_room_6303_9a091c8f3ec67678 = []byte{
	// 1258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x4f, 0x8f, 0xd3, 0x46,
	0x14, 0xc0, 0xd7, 0x71, 0xb2, 0x89, 0xdf, 0x26, 0x59, 0x77, 0x80, 0xca, 0x5a, 0xb5, 0x21, 0x78,
	0x41, 0x44, 0x5b, 0x09, 0x95, 0x5d, 0x95, 0xf6, 0x9a, 0x3f, 0x86, 0x5d, 0x91, 0x26, 0xc1, 0xc9,
	0x0a, 0xd1, 0x3f, 0xb2, 0x86, 0x78, 0x96, 0x8c, 0xd6, 0xf1, 0xa4, 0x1e, 0x67, 0x59, 0xf8, 0x14,
	0x3d, 0xf5, 0x5a, 0xa9, 0x87, 0x1e, 0xfa, 0x49, 0x38, 0x72, 0xec, 0xa9, 0xaa, 0xe0, 0xd4, 0x6f,
	0x51, 0xcd, 0x8c, 0xed, 0x38, 0xab, 0x05, 0xca, 0xad, 0x37, 0xfb, 0xf7, 0xfc, 0xde, 0xbc, 0xff,
	0x63, 0xb8, 0x32, 0xe7, 0xcf, 0xbc, 0x88, 0xb1, 0xb9, 0x77, 0xef, 0xe0, 0xcb, 0x83, 0x3b, 0x8b,
	0x88, 0xc5, 0x0c, 0xe9, 0xbe, 0xff, 0x72, 0xe7, 0x9a, 0x92, 0x04, 0xc4, 0x9b, 0xb2, 0xf9, 0x9c,
	0x85, 0x4a, 0x66, 0x4f, 0xa0, 0x3a, 0x5a, 0xf2, 0x99, 0xcb, 0xd8, 0xfc, 0x28, 0x3c, 0x61, 0xe8,
	0x3a, 0x54, 0x38, 0x09, 0x4e, 0xbc, 0x05, 0xe3, 0x96, 0xd6, 0x2c, 0xb4, 0x6a, 0x9d, 0xe2, 0xab,
	0xbf, 0xae, 0x6f, 0xb8, 0x65, 0x41, 0x47, 0x8c, 0xa3, 0x5d, 0x28, 0x71, 0x82, 0x63, 0x6e, 0x15,
	0x9a, 0x85, 0xd6, 0xd6, 0x7e, 0xed, 0x8e, 0xef, 0xbf, 0xbc, 0x33, 0x26, 0x38, 0x16, 0xea, 0xae,
	0x92, 0xd9, 0xbf, 0xe8, 0x50, 0x49, 0x19, 0xfa, 0x14, 0xf4, 0x8b, 0xd6, 0x04, 0x40, 0x4d, 0xa8,
	0x84, 0x74, 0x7a, 0x1a, 0xe2, 0x39, 0x91, 0xc6, 0x8c, 0x44, 0x98, 0x51, 0xb4, 0x03, 0xa5, 0xe9,
	0x8c, 0x2e, 0xb8, 0xa5, 0x37, 0x0b, 0xad, 0x62, 0x22, 0x56, 0x08, 0x7d, 0x06, 0x9b, 0xf8, 0x0c,
	0xc7, 0x38, 0xb2, 0x8a, 0x39, 0xc3, 0x09, 0x43, 0xb7, 0x40, 0xe7, 0xe4, 0xdc, 0x2a, 0x35, 0x0b,
	0xad, 0x7a, 0xe2, 0xa3, 0x8c, 0x9d, 0x93, 0xf3, 0xd4, 0x05, 0x4e, 0xce, 0xd1, 0x55, 0x28, 0x4d,
	0x71, 0xe4, 0x73, 0x6b, 0xb3, 0xa9, 0xb7, 0x6a, 0xae, 0x7a, 0x41, 0x37, 0xc0, 0x10, 0x0f, 0x5e,
	0xfc, 0x62, 0x41, 0xac, 0x72, 0x53, 0xcb, 0xac, 0x57, 0x04, 0x9e, 0xbc, 0x58, 0x10, 0xb4, 0x0b,
	0x30, 0x5d, 0x46, 0x91, 0xa7, 0xdc, 0xab, 0xe4, 0xbe, 0x31, 0x04, 0xef, 0xa6, 0x2e, 0x2e, 0x22,
	0x76, 0x42, 0x63, 0xcb, 0x68, 0x6a, 0x2d, 0x3d, 0x75, 0x51, 0x31, 0x61, 0x82, 0x72, 0xcf, 0xa7,
	0x5c, 0x18, 0xb5, 0xa0, 0xa9, 0xb5, 0x2a, 0xa9, 0x09, 0xca, 0x7b, 0x0a, 0xa3, 0x5b, 0xb0, 0x45,
	0xb9, 0xc7, 0x67, 0xec, 0xf9, 0x0c, 0x87, 0xbe, 0xb5, 0x95, 0xfb, 0x0a, 0x28, 0x1f, 0x27, 0x1c,
	0xdd, 0x86, 0x2a, 0x5f, 0x44, 0xd8, 0x27, 0x1e, 0x0d, 0x7d, 0x72, 0x6e, 0x55, 0x73, 0x0e, 0x6d,
	0x29, 0xc9, 0x91, 0x10, 0xd8, 0xdf, 0x43, 0xa5, 0x8b, 0x23, 0xff, 0xbd, 0x75, 0xc9, 0x92, 0x52,
	0x78, 0x67, 0x52, 0xf4, 0xcb, 0x92, 0x62, 0x1f, 0x40, 0xad, 0x83, 0x39, 0x91, 0xc1, 0x8b, 0xa6,
	0x42, 0x36, 0x14, 0x69, 0x78, 0xc2, 0x2c, 0xad, 0xa9, 0xb7, 0xb6, 0xf6, 0xeb, 0xb2, 0x0c, 0x52,
	0x2a, 0x7b, 0x45, 0xca, 0xec, 0x7d, 0xa8, 0xf5, 0x08, 0x0e, 0x84, 0x57, 0x4a, 0xe9, 0xc6, 0x9a,
	0x92, 0xaa, 0x5d, 0xea, 0x73, 0xa2, 0x33, 0x82, 0xda, 0x7d, 0x1a, 0xe2, 0x40, 0x28, 0xba, 0x84,
	0x2f, 0x64, 0xa3, 0x48, 0x97, 0xb5, 0x9c, 0x63, 0x89, 0xe3, 0xbb, 0x00, 0x27, 0x34, 0xe2, 0xb1,
	0x27, 0xf3, 0x5c, 0xc8, 0x97, 0x4a, 0x72, 0x61, 0xdb, 0xfe, 0x01, 0x60, 0xbc, 0x88, 0x08, 0x7e,
	0x7f, 0x66, 0x76, 0xa0, 0xa4, 0xf2, 0x5b, 0xc8, 0x49, 0x14, 0x5a, 0xb9, 0xa0, 0xe7, 0x65, 0x12,
	0xd9, 0xf7, 0x60, 0x5b, 0x59, 0x5f, 0x45, 0xb9, 0xbb, 0x16, 0xe5, 0xb6, 0x9a, 0xa2, 0xcc, 0x83,
	0x24, 0xce, 0x03, 0xa8, 0x77, 0x67, 0x64, 0x7a, 0xfa, 0x51, 0xc9, 0x79, 0x04, 0xc6, 0x38, 0xc6,
	0xcf, 0x48, 0x72, 0x0c, 0x44, 0x6c, 0x19, 0xfa, 0x5e, 0x4c, 0x93, 0x29, 0xcb, 0x82, 0x97, 0x7c,
	0x42, 0xe7, 0x44, 0xcc, 0xbc, 0x6c, 0x66, 0x11, 0x73, 0xbe, 0xb2, 0x65, 0x41, 0x47, 0x8c, 0xdb,
	0xc7, 0x50, 0x73, 0xd9, 0xd3, 0x0e, 0x0e, 0x4f, 0x49, 0x34, 0x5c, 0x90, 0x68, 0x4d, 0x63, 0x6d,
	0x4b, 0x24, 0x1a, 0xff, 0xe9, 0x5c, 0xfb, 0x51, 0xce, 0xac, 0x2c, 0xe3, 0x07, 0xcd, 0x8a, 0xed,
	0xb4, 0x8c, 0x88, 0x17, 0xb1, 0xa7, 0xd2, 0x68, 0x25, 0xdb, 0x4e, 0xcb, 0x88, 0xb8, 0xec, 0xa9,
	0xdd, 0x01, 0xa3, 0x47, 0x17, 0x98, 0xca, 0xe0, 0x3f, 0x68, 0xee, 0xd2, 0x4e, 0xb7, 0x03, 0x35,
	0x23, 0x3d, 0x1c, 0x63, 0xb1, 0xa3, 0x04, 0x94, 0x4d, 0xaf, 0x5d, 0x6c, 0x7a, 0x41, 0x91, 0xad,
	0xe6, 0xe2, 0x0c, 0x07, 0x4b, 0xb2, 0xde, 0x5d, 0x19, 0x16, 0xbd, 0x41, 0xce, 0xe3, 0x08, 0xaf,
	0x65, 0x57, 0x21, 0xfb, 0x37, 0x0d, 0xaa, 0x22, 0xa7, 0x38, 0xa6, 0x2c, 0x74, 0xc9, 0x4f, 0xab,
	0xe6, 0xd3, 0xd6, 0x9b, 0xef, 0x6b, 0x30, 0x58, 0xfa, 0x9d, 0x0c, 0xbe, 0xbe, 0x7f, 0x45, 0xd6,
	0x3f, 0xa3, 0x72, 0x36, 0xd3, 0xd3, 0x33, 0x2a, 0x7a, 0xc6, 0xc7, 0xb1, 0x3a, 0x3c, 0xdf, 0x33,
	0x22, 0x40, 0x57, 0x8a, 0x50, 0x03, 0xca, 0x21, 0x53, 0xa9, 0x28, 0xe6, 0x56, 0x4c, 0x0a, 0xed,
	0xdf, 0x35, 0x30, 0x45, 0x4a, 0x47, 0x8c, 0x67, 0xbe, 0xfe, 0x2f, 0x1d, 0xbd, 0x0b, 0xd5, 0x07,
	0x78, 0x4e, 0xd8, 0x19, 0x89, 0x92, 0x79, 0x31, 0x7c, 0xfa, 0x72, 0xb6, 0xf4, 0x9e, 0xd3, 0x50,
	0x7a, 0x9a, 0x6a, 0x54, 0x24, 0x7e, 0x4c, 0x43, 0xfb, 0x47, 0x30, 0xb2, 0x9d, 0xf4, 0xbe, 0xc9,
	0x57, 0xab, 0xbe, 0x70, 0xe9, 0x4d, 0x94, 0xac, 0x79, 0x31, 0xfa, 0x17, 0xd6, 0xbc, 0xfd, 0x15,
	0x6c, 0x8f, 0x49, 0x1c, 0x07, 0x1f, 0xb9, 0x16, 0x6f, 0x43, 0xad, 0x4f, 0xf0, 0x19, 0x11, 0x17,
	0xb3, 0x54, 0x7a, 0x87, 0x67, 0xf6, 0x3f, 0x05, 0xd8, 0x76, 0x49, 0xc0, 0x9e, 0xd1, 0x50, 0xaa,
	0x8b, 0x39, 0x7a, 0x57, 0x14, 0x5f, 0x40, 0x89, 0x8b, 0xd5, 0x90, 0x54, 0x45, 0x6d, 0x1d, 0x49,
	0xf2, 0x15, 0x51, 0xdf, 0x5c, 0x18, 0x61, 0xfd, 0xc3, 0xab, 0xa3, 0x78, 0xc9, 0xea, 0x58, 0xfd,
	0x2e, 0x94, 0x72, 0x1b, 0xeb, 0xc2, 0xef, 0x02, 0xb2, 0xa0, 0x88, 0xc3, 0x98, 0x58, 0x9b, 0xb9,
	0x43, 0x24, 0x11, 0xf7, 0x5f, 0x84, 0x29, 0x27, 0xde, 0x7c, 0x19, 0xc4, 0xd4, 0x2a, 0xe7, 0x3e,
	0x00, 0x29, 0xf8, 0x56, 0x70, 0xb4, 0x07, 0x75, 0x1c, 0x04, 0xde, 0xda, 0x95, 0xbc, 0xaa, 0x53,
	0x15, 0x07, 0x41, 0x37, 0xbb, 0x95, 0x77, 0xa0, 0x24, 0xfd, 0xb7, 0x8c, 0xfc, 0xa2, 0x96, 0x08,
	0x7d, 0x0e, 0x30, 0xa3, 0x3e, 0xf1, 0x54, 0x87, 0x81, 0xdc, 0x0a, 0x86, 0x20, 0x72, 0x03, 0xdb,
	0xdf, 0x40, 0x55, 0xd4, 0xa3, 0xcb, 0x7c, 0x22, 0xf3, 0xdc, 0x82, 0xe2, 0x94, 0xf9, 0x44, 0x26,
	0xba, 0x9e, 0x14, 0x52, 0xfe, 0x7c, 0x09, 0x9a, 0xc6, 0x21, 0x9e, 0xed, 0x9b, 0x50, 0xe9, 0x33,
	0x76, 0x2a, 0xb5, 0x2c, 0x28, 0xca, 0xab, 0x68, 0x2d, 0x5a, 0x41, 0xf6, 0x7e, 0xd5, 0x00, 0x56,
	0xe5, 0x40, 0xd7, 0xe0, 0x93, 0xec, 0x57, 0xce, 0x8b, 0xc8, 0x19, 0x89, 0x38, 0x31, 0x37, 0xd0,
	0x36, 0x6c, 0x8d, 0x27, 0xed, 0x07, 0x8e, 0xe7, 0x3a, 0xed, 0xde, 0x13, 0x53, 0x43, 0x35, 0x30,
	0x14, 0xe8, 0x38, 0x13, 0xb3, 0x80, 0xea, 0x00, 0xea, 0xb5, 0xe7, 0xb4, 0xfb, 0xa6, 0x8e, 0x4c,
	0xa8, 0xaa, 0xf7, 0xf1, 0xc8, 0x6d, 0xf7, 0x1c, 0xb3, 0x28, 0x0c, 0x2b, 0x72, 0xff, 0x68, 0xd0,
	0xee, 0x7b, 0xee, 0xf0, 0x78, 0xd0, 0x33, 0x4b, 0x2b, 0xc3, 0xdd, 0x43, 0xa7, 0xfb, 0xd0, 0xdc,
	0xcc, 0x69, 0x3a, 0x93, 0x49, 0xdf, 0x31, 0xcb, 0x7b, 0x77, 0xc1, 0xc8, 0x02, 0xcc, 0xfc, 0x13,
	0x2f, 0x39, 0xff, 0x6a, 0x60, 0xf4, 0x87, 0x8f, 0xbd, 0xee, 0xe1, 0xd1, 0x68, 0x6c, 0x6a, 0x7b,
	0x37, 0xa1, 0xbe, 0x3e, 0xf8, 0xa8, 0x02, 0xc5, 0x05, 0xe6, 0xdc, 0xdc, 0x10, 0x4f, 0x3e, 0xa3,
	0xb1, 0xa9, 0xed, 0xfd, 0xa1, 0x81, 0xd1, 0x6d, 0xbb, 0x3d, 0x6f, 0xf2, 0x64, 0xe4, 0x20, 0x80,
	0xcd, 0x01, 0x8b, 0x97, 0x69, 0xb8, 0xee, 0xb0, 0xfb, 0xd0, 0x99, 0x48, 0x91, 0xa9, 0x09, 0xf0,
	0xdd, 0x61, 0xbb, 0xd7, 0x1e, 0x28, 0x50, 0x40, 0x57, 0x60, 0xbb, 0x37, 0x3c, 0xee, 0x3b, 0x7d,
	0xef, 0x68, 0xf0, 0x50, 0x41, 0x1d, 0x5d, 0x05, 0x73, 0x7c, 0x34, 0x78, 0xd0, 0x77, 0xbc, 0x7e,
	0x46, 0x8b, 0x08, 0x41, 0x7d, 0x72, 0xe8, 0x3a, 0x8e, 0x37, 0x1c, 0x38, 0x8a, 0x95, 0x44, 0xbe,
	0x14, 0x93, 0xef, 0x9b, 0xc2, 0x7e, 0x6f, 0x78, 0xdc, 0xe9, 0x27, 0xa0, 0x2c, 0xf3, 0xa2, 0x4c,
	0x49, 0x50, 0xe9, 0x58, 0xaf, 0xde, 0x34, 0xb4, 0xd7, 0x6f, 0x1a, 0xda, 0xdf, 0x6f, 0x1a, 0xda,
	0xcf, 0x6f, 0x1b, 0x1b, 0xaf, 0xdf, 0x36, 0x36, 0xfe, 0x7c, 0xdb, 0xd8, 0xf8, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x43, 0xf5, 0x2a, 0x08, 0x80, 0x0b, 0x00, 0x00,
}
