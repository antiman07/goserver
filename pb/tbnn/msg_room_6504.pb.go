// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_room_6504.proto

package tbnn

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgRoomStage int32

const (
	MsgRoomStage_msg_room_stage_reserve MsgRoomStage = 0
	MsgRoomStage_ROOM_STAGE_READY       MsgRoomStage = 1
	MsgRoomStage_ROOM_STAGE_BET         MsgRoomStage = 2
	MsgRoomStage_ROOM_STAGE_DEAL        MsgRoomStage = 3
	MsgRoomStage_ROOM_STAGE_SPRADE      MsgRoomStage = 4
	MsgRoomStage_ROOM_STAGE_SETTLE      MsgRoomStage = 5
)

var MsgRoomStage_name = map[int32]string{
	0: "msg_room_stage_reserve",
	1: "ROOM_STAGE_READY",
	2: "ROOM_STAGE_BET",
	3: "ROOM_STAGE_DEAL",
	4: "ROOM_STAGE_SPRADE",
	5: "ROOM_STAGE_SETTLE",
}
var MsgRoomStage_value = map[string]int32{
	"msg_room_stage_reserve": 0,
	"ROOM_STAGE_READY":       1,
	"ROOM_STAGE_BET":         2,
	"ROOM_STAGE_DEAL":        3,
	"ROOM_STAGE_SPRADE":      4,
	"ROOM_STAGE_SETTLE":      5,
}

func (x MsgRoomStage) Enum() *MsgRoomStage {
	p := new(MsgRoomStage)
	*p = x
	return p
}
func (x MsgRoomStage) String() string {
	return proto.EnumName(MsgRoomStage_name, int32(x))
}
func (x *MsgRoomStage) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgRoomStage_value, data, "MsgRoomStage")
	if err != nil {
		return err
	}
	*x = MsgRoomStage(value)
	return nil
}
func (MsgRoomStage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{0}
}

type MsgRoomCode int32

const (
	MsgRoomCode_msg_room_code_reserve MsgRoomCode = 0
	MsgRoomCode_JETTION_NOT_ENOUGH    MsgRoomCode = 1
	MsgRoomCode_BET_NOT_MATCH         MsgRoomCode = 2
	MsgRoomCode_STOP_GAME             MsgRoomCode = 3
)

var MsgRoomCode_name = map[int32]string{
	0: "msg_room_code_reserve",
	1: "JETTION_NOT_ENOUGH",
	2: "BET_NOT_MATCH",
	3: "STOP_GAME",
}
var MsgRoomCode_value = map[string]int32{
	"msg_room_code_reserve": 0,
	"JETTION_NOT_ENOUGH":    1,
	"BET_NOT_MATCH":         2,
	"STOP_GAME":             3,
}

func (x MsgRoomCode) Enum() *MsgRoomCode {
	p := new(MsgRoomCode)
	*p = x
	return p
}
func (x MsgRoomCode) String() string {
	return proto.EnumName(MsgRoomCode_name, int32(x))
}
func (x *MsgRoomCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgRoomCode_value, data, "MsgRoomCode")
	if err != nil {
		return err
	}
	*x = MsgRoomCode(value)
	return nil
}
func (MsgRoomCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{1}
}

type PokerInfo struct {
	Point uint32 `protobuf:"varint,1,req,name=point" json:"point"`
	Color uint32 `protobuf:"varint,2,req,name=color" json:"color"`
}

func (m *PokerInfo) Reset()         { *m = PokerInfo{} }
func (m *PokerInfo) String() string { return proto.CompactTextString(m) }
func (*PokerInfo) ProtoMessage()    {}
func (*PokerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{0}
}
func (m *PokerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PokerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PokerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PokerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PokerInfo.Merge(dst, src)
}
func (m *PokerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PokerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PokerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PokerInfo proto.InternalMessageInfo

func (m *PokerInfo) GetPoint() uint32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *PokerInfo) GetColor() uint32 {
	if m != nil {
		return m.Color
	}
	return 0
}

type EnterRoomPush struct {
	RolePos uint32          `protobuf:"varint,1,req,name=role_pos,json=rolePos" json:"role_pos"`
	Role    []*RoomRoleInfo `protobuf:"bytes,2,rep,name=role" json:"role,omitempty"`
}

func (m *EnterRoomPush) Reset()         { *m = EnterRoomPush{} }
func (m *EnterRoomPush) String() string { return proto.CompactTextString(m) }
func (*EnterRoomPush) ProtoMessage()    {}
func (*EnterRoomPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{1}
}
func (m *EnterRoomPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterRoomPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterRoomPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EnterRoomPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterRoomPush.Merge(dst, src)
}
func (m *EnterRoomPush) XXX_Size() int {
	return m.Size()
}
func (m *EnterRoomPush) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterRoomPush.DiscardUnknown(m)
}

var xxx_messageInfo_EnterRoomPush proto.InternalMessageInfo

func (m *EnterRoomPush) GetRolePos() uint32 {
	if m != nil {
		return m.RolePos
	}
	return 0
}

func (m *EnterRoomPush) GetRole() []*RoomRoleInfo {
	if m != nil {
		return m.Role
	}
	return nil
}

type SyncRoomStagePush struct {
	Stage MsgRoomStage `protobuf:"varint,1,req,name=stage,enum=tbnn.MsgRoomStage" json:"stage"`
	TTime uint32       `protobuf:"varint,2,req,name=t_time,json=tTime" json:"t_time"`
}

func (m *SyncRoomStagePush) Reset()         { *m = SyncRoomStagePush{} }
func (m *SyncRoomStagePush) String() string { return proto.CompactTextString(m) }
func (*SyncRoomStagePush) ProtoMessage()    {}
func (*SyncRoomStagePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{2}
}
func (m *SyncRoomStagePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRoomStagePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRoomStagePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SyncRoomStagePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRoomStagePush.Merge(dst, src)
}
func (m *SyncRoomStagePush) XXX_Size() int {
	return m.Size()
}
func (m *SyncRoomStagePush) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRoomStagePush.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRoomStagePush proto.InternalMessageInfo

func (m *SyncRoomStagePush) GetStage() MsgRoomStage {
	if m != nil {
		return m.Stage
	}
	return MsgRoomStage_msg_room_stage_reserve
}

func (m *SyncRoomStagePush) GetTTime() uint32 {
	if m != nil {
		return m.TTime
	}
	return 0
}

// 下注倍数列表
type MultiListPush struct {
	MultiList []uint32 `protobuf:"varint,1,rep,name=multi_list,json=multiList" json:"multi_list,omitempty"`
}

func (m *MultiListPush) Reset()         { *m = MultiListPush{} }
func (m *MultiListPush) String() string { return proto.CompactTextString(m) }
func (*MultiListPush) ProtoMessage()    {}
func (*MultiListPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{3}
}
func (m *MultiListPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiListPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiListPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MultiListPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiListPush.Merge(dst, src)
}
func (m *MultiListPush) XXX_Size() int {
	return m.Size()
}
func (m *MultiListPush) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiListPush.DiscardUnknown(m)
}

var xxx_messageInfo_MultiListPush proto.InternalMessageInfo

func (m *MultiListPush) GetMultiList() []uint32 {
	if m != nil {
		return m.MultiList
	}
	return nil
}

// 下注请求
type BetMultiReq struct {
	Multi uint32 `protobuf:"varint,1,req,name=multi" json:"multi"`
}

func (m *BetMultiReq) Reset()         { *m = BetMultiReq{} }
func (m *BetMultiReq) String() string { return proto.CompactTextString(m) }
func (*BetMultiReq) ProtoMessage()    {}
func (*BetMultiReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{4}
}
func (m *BetMultiReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetMultiReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetMultiReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BetMultiReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetMultiReq.Merge(dst, src)
}
func (m *BetMultiReq) XXX_Size() int {
	return m.Size()
}
func (m *BetMultiReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BetMultiReq.DiscardUnknown(m)
}

var xxx_messageInfo_BetMultiReq proto.InternalMessageInfo

func (m *BetMultiReq) GetMulti() uint32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

// 下注结果
type BetMultiPush struct {
	Pos   uint32 `protobuf:"varint,1,req,name=pos" json:"pos"`
	Multi uint32 `protobuf:"varint,2,req,name=multi" json:"multi"`
}

func (m *BetMultiPush) Reset()         { *m = BetMultiPush{} }
func (m *BetMultiPush) String() string { return proto.CompactTextString(m) }
func (*BetMultiPush) ProtoMessage()    {}
func (*BetMultiPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{5}
}
func (m *BetMultiPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetMultiPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetMultiPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BetMultiPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetMultiPush.Merge(dst, src)
}
func (m *BetMultiPush) XXX_Size() int {
	return m.Size()
}
func (m *BetMultiPush) XXX_DiscardUnknown() {
	xxx_messageInfo_BetMultiPush.DiscardUnknown(m)
}

var xxx_messageInfo_BetMultiPush proto.InternalMessageInfo

func (m *BetMultiPush) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *BetMultiPush) GetMulti() uint32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

// 发牌
type DealCardResp struct {
	Cards []*PokerInfo `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
}

func (m *DealCardResp) Reset()         { *m = DealCardResp{} }
func (m *DealCardResp) String() string { return proto.CompactTextString(m) }
func (*DealCardResp) ProtoMessage()    {}
func (*DealCardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{6}
}
func (m *DealCardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DealCardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DealCardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DealCardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DealCardResp.Merge(dst, src)
}
func (m *DealCardResp) XXX_Size() int {
	return m.Size()
}
func (m *DealCardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DealCardResp.DiscardUnknown(m)
}

var xxx_messageInfo_DealCardResp proto.InternalMessageInfo

func (m *DealCardResp) GetCards() []*PokerInfo {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 翻牌
type SpreadCardReq struct {
}

func (m *SpreadCardReq) Reset()         { *m = SpreadCardReq{} }
func (m *SpreadCardReq) String() string { return proto.CompactTextString(m) }
func (*SpreadCardReq) ProtoMessage()    {}
func (*SpreadCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{7}
}
func (m *SpreadCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SpreadCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadCardReq.Merge(dst, src)
}
func (m *SpreadCardReq) XXX_Size() int {
	return m.Size()
}
func (m *SpreadCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadCardReq proto.InternalMessageInfo

// 翻牌结果
type SpreadCardPush struct {
	Info []*SpreadInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *SpreadCardPush) Reset()         { *m = SpreadCardPush{} }
func (m *SpreadCardPush) String() string { return proto.CompactTextString(m) }
func (*SpreadCardPush) ProtoMessage()    {}
func (*SpreadCardPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{8}
}
func (m *SpreadCardPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadCardPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadCardPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SpreadCardPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadCardPush.Merge(dst, src)
}
func (m *SpreadCardPush) XXX_Size() int {
	return m.Size()
}
func (m *SpreadCardPush) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadCardPush.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadCardPush proto.InternalMessageInfo

func (m *SpreadCardPush) GetInfo() []*SpreadInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type SpreadInfo struct {
	Pos      uint32       `protobuf:"varint,1,req,name=pos" json:"pos"`
	CardType uint32       `protobuf:"varint,2,req,name=card_type,json=cardType" json:"card_type"`
	Cards    []*PokerInfo `protobuf:"bytes,3,rep,name=cards" json:"cards,omitempty"`
}

func (m *SpreadInfo) Reset()         { *m = SpreadInfo{} }
func (m *SpreadInfo) String() string { return proto.CompactTextString(m) }
func (*SpreadInfo) ProtoMessage()    {}
func (*SpreadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{9}
}
func (m *SpreadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SpreadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadInfo.Merge(dst, src)
}
func (m *SpreadInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpreadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadInfo proto.InternalMessageInfo

func (m *SpreadInfo) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SpreadInfo) GetCardType() uint32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *SpreadInfo) GetCards() []*PokerInfo {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 结算收益
type SettleChipPush struct {
	Info []*SettleInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *SettleChipPush) Reset()         { *m = SettleChipPush{} }
func (m *SettleChipPush) String() string { return proto.CompactTextString(m) }
func (*SettleChipPush) ProtoMessage()    {}
func (*SettleChipPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{10}
}
func (m *SettleChipPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettleChipPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettleChipPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SettleChipPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleChipPush.Merge(dst, src)
}
func (m *SettleChipPush) XXX_Size() int {
	return m.Size()
}
func (m *SettleChipPush) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleChipPush.DiscardUnknown(m)
}

var xxx_messageInfo_SettleChipPush proto.InternalMessageInfo

func (m *SettleChipPush) GetInfo() []*SettleInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type SettleInfo struct {
	Pos    uint32 `protobuf:"varint,1,req,name=pos" json:"pos"`
	Chips  uint64 `protobuf:"varint,2,req,name=chips" json:"chips"`
	Profit int64  `protobuf:"varint,3,req,name=profit" json:"profit"`
}

func (m *SettleInfo) Reset()         { *m = SettleInfo{} }
func (m *SettleInfo) String() string { return proto.CompactTextString(m) }
func (*SettleInfo) ProtoMessage()    {}
func (*SettleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{11}
}
func (m *SettleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SettleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleInfo.Merge(dst, src)
}
func (m *SettleInfo) XXX_Size() int {
	return m.Size()
}
func (m *SettleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SettleInfo proto.InternalMessageInfo

func (m *SettleInfo) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SettleInfo) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *SettleInfo) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

// 错误信息
type CodeInfoResp struct {
	Code MsgRoomCode `protobuf:"varint,1,req,name=code,enum=tbnn.MsgRoomCode" json:"code"`
}

func (m *CodeInfoResp) Reset()         { *m = CodeInfoResp{} }
func (m *CodeInfoResp) String() string { return proto.CompactTextString(m) }
func (*CodeInfoResp) ProtoMessage()    {}
func (*CodeInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{12}
}
func (m *CodeInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CodeInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeInfoResp.Merge(dst, src)
}
func (m *CodeInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *CodeInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_CodeInfoResp proto.InternalMessageInfo

func (m *CodeInfoResp) GetCode() MsgRoomCode {
	if m != nil {
		return m.Code
	}
	return MsgRoomCode_msg_room_code_reserve
}

type ReloginInfoResp struct {
	Pos      uint32          `protobuf:"varint,1,req,name=pos" json:"pos"`
	Chips    uint64          `protobuf:"varint,2,req,name=chips" json:"chips"`
	Stage    MsgRoomStage    `protobuf:"varint,3,req,name=stage,enum=tbnn.MsgRoomStage" json:"stage"`
	TTime    uint32          `protobuf:"varint,4,req,name=t_time,json=tTime" json:"t_time"`
	RoomAnte uint32          `protobuf:"varint,5,req,name=room_ante,json=roomAnte" json:"room_ante"`
	Role     []*RoomRoleInfo `protobuf:"bytes,6,rep,name=role" json:"role,omitempty"`
}

func (m *ReloginInfoResp) Reset()         { *m = ReloginInfoResp{} }
func (m *ReloginInfoResp) String() string { return proto.CompactTextString(m) }
func (*ReloginInfoResp) ProtoMessage()    {}
func (*ReloginInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{13}
}
func (m *ReloginInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReloginInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReloginInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ReloginInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloginInfoResp.Merge(dst, src)
}
func (m *ReloginInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *ReloginInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloginInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReloginInfoResp proto.InternalMessageInfo

func (m *ReloginInfoResp) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *ReloginInfoResp) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *ReloginInfoResp) GetStage() MsgRoomStage {
	if m != nil {
		return m.Stage
	}
	return MsgRoomStage_msg_room_stage_reserve
}

func (m *ReloginInfoResp) GetTTime() uint32 {
	if m != nil {
		return m.TTime
	}
	return 0
}

func (m *ReloginInfoResp) GetRoomAnte() uint32 {
	if m != nil {
		return m.RoomAnte
	}
	return 0
}

func (m *ReloginInfoResp) GetRole() []*RoomRoleInfo {
	if m != nil {
		return m.Role
	}
	return nil
}

// 房间内角色信息
type RoomRoleInfo struct {
	Avatar   uint32       `protobuf:"varint,2,req,name=avatar" json:"avatar"`
	Nickname string       `protobuf:"bytes,3,req,name=nickname" json:"nickname"`
	Pos      uint32       `protobuf:"varint,4,req,name=pos" json:"pos"`
	Chips    uint64       `protobuf:"varint,5,req,name=chips" json:"chips"`
	Profit   int64        `protobuf:"varint,6,opt,name=profit" json:"profit"`
	Cards    []*PokerInfo `protobuf:"bytes,7,rep,name=cards" json:"cards,omitempty"`
	CardType uint32       `protobuf:"varint,8,opt,name=card_type,json=cardType" json:"card_type"`
	BetMulti uint32       `protobuf:"varint,9,opt,name=bet_multi,json=betMulti" json:"bet_multi"`
}

func (m *RoomRoleInfo) Reset()         { *m = RoomRoleInfo{} }
func (m *RoomRoleInfo) String() string { return proto.CompactTextString(m) }
func (*RoomRoleInfo) ProtoMessage()    {}
func (*RoomRoleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_6504_d64573970ee31493, []int{14}
}
func (m *RoomRoleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRoleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRoleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRoleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRoleInfo.Merge(dst, src)
}
func (m *RoomRoleInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomRoleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRoleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRoleInfo proto.InternalMessageInfo

func (m *RoomRoleInfo) GetAvatar() uint32 {
	if m != nil {
		return m.Avatar
	}
	return 0
}

func (m *RoomRoleInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RoomRoleInfo) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *RoomRoleInfo) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *RoomRoleInfo) GetProfit() int64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *RoomRoleInfo) GetCards() []*PokerInfo {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *RoomRoleInfo) GetCardType() uint32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *RoomRoleInfo) GetBetMulti() uint32 {
	if m != nil {
		return m.BetMulti
	}
	return 0
}

func init() {
	proto.RegisterType((*PokerInfo)(nil), "tbnn.PokerInfo")
	proto.RegisterType((*EnterRoomPush)(nil), "tbnn.EnterRoomPush")
	proto.RegisterType((*SyncRoomStagePush)(nil), "tbnn.SyncRoomStagePush")
	proto.RegisterType((*MultiListPush)(nil), "tbnn.MultiListPush")
	proto.RegisterType((*BetMultiReq)(nil), "tbnn.BetMultiReq")
	proto.RegisterType((*BetMultiPush)(nil), "tbnn.BetMultiPush")
	proto.RegisterType((*DealCardResp)(nil), "tbnn.DealCardResp")
	proto.RegisterType((*SpreadCardReq)(nil), "tbnn.SpreadCardReq")
	proto.RegisterType((*SpreadCardPush)(nil), "tbnn.SpreadCardPush")
	proto.RegisterType((*SpreadInfo)(nil), "tbnn.SpreadInfo")
	proto.RegisterType((*SettleChipPush)(nil), "tbnn.SettleChipPush")
	proto.RegisterType((*SettleInfo)(nil), "tbnn.SettleInfo")
	proto.RegisterType((*CodeInfoResp)(nil), "tbnn.CodeInfoResp")
	proto.RegisterType((*ReloginInfoResp)(nil), "tbnn.ReloginInfoResp")
	proto.RegisterType((*RoomRoleInfo)(nil), "tbnn.RoomRoleInfo")
	proto.RegisterEnum("tbnn.MsgRoomStage", MsgRoomStage_name, MsgRoomStage_value)
	proto.RegisterEnum("tbnn.MsgRoomCode", MsgRoomCode_name, MsgRoomCode_value)
}
func (m *PokerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PokerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Point))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Color))
	return i, nil
}

func (m *EnterRoomPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterRoomPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.RolePos))
	if len(m.Role) > 0 {
		for _, msg := range m.Role {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsgRoom_6504(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SyncRoomStagePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRoomStagePush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Stage))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.TTime))
	return i, nil
}

func (m *MultiListPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiListPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MultiList) > 0 {
		for _, num := range m.MultiList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintMsgRoom_6504(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *BetMultiReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetMultiReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Multi))
	return i, nil
}

func (m *BetMultiPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetMultiPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Multi))
	return i, nil
}

func (m *DealCardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DealCardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoom_6504(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SpreadCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadCardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SpreadCardPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadCardPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoom_6504(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SpreadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.CardType))
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMsgRoom_6504(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SettleChipPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleChipPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoom_6504(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SettleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Chips))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Profit))
	return i, nil
}

func (m *CodeInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Code))
	return i, nil
}

func (m *ReloginInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReloginInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Chips))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Stage))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.TTime))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.RoomAnte))
	if len(m.Role) > 0 {
		for _, msg := range m.Role {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMsgRoom_6504(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoomRoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRoleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Avatar))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(len(m.Nickname)))
	i += copy(dAtA[i:], m.Nickname)
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Chips))
	dAtA[i] = 0x30
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.Profit))
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintMsgRoom_6504(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x40
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.CardType))
	dAtA[i] = 0x48
	i++
	i = encodeVarintMsgRoom_6504(dAtA, i, uint64(m.BetMulti))
	return i, nil
}

func encodeVarintMsgRoom_6504(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PokerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.Point))
	n += 1 + sovMsgRoom_6504(uint64(m.Color))
	return n
}

func (m *EnterRoomPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.RolePos))
	if len(m.Role) > 0 {
		for _, e := range m.Role {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6504(uint64(l))
		}
	}
	return n
}

func (m *SyncRoomStagePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.Stage))
	n += 1 + sovMsgRoom_6504(uint64(m.TTime))
	return n
}

func (m *MultiListPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MultiList) > 0 {
		for _, e := range m.MultiList {
			n += 1 + sovMsgRoom_6504(uint64(e))
		}
	}
	return n
}

func (m *BetMultiReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.Multi))
	return n
}

func (m *BetMultiPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.Pos))
	n += 1 + sovMsgRoom_6504(uint64(m.Multi))
	return n
}

func (m *DealCardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6504(uint64(l))
		}
	}
	return n
}

func (m *SpreadCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SpreadCardPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6504(uint64(l))
		}
	}
	return n
}

func (m *SpreadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.Pos))
	n += 1 + sovMsgRoom_6504(uint64(m.CardType))
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6504(uint64(l))
		}
	}
	return n
}

func (m *SettleChipPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6504(uint64(l))
		}
	}
	return n
}

func (m *SettleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.Pos))
	n += 1 + sovMsgRoom_6504(uint64(m.Chips))
	n += 1 + sovMsgRoom_6504(uint64(m.Profit))
	return n
}

func (m *CodeInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.Code))
	return n
}

func (m *ReloginInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.Pos))
	n += 1 + sovMsgRoom_6504(uint64(m.Chips))
	n += 1 + sovMsgRoom_6504(uint64(m.Stage))
	n += 1 + sovMsgRoom_6504(uint64(m.TTime))
	n += 1 + sovMsgRoom_6504(uint64(m.RoomAnte))
	if len(m.Role) > 0 {
		for _, e := range m.Role {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6504(uint64(l))
		}
	}
	return n
}

func (m *RoomRoleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoom_6504(uint64(m.Avatar))
	l = len(m.Nickname)
	n += 1 + l + sovMsgRoom_6504(uint64(l))
	n += 1 + sovMsgRoom_6504(uint64(m.Pos))
	n += 1 + sovMsgRoom_6504(uint64(m.Chips))
	n += 1 + sovMsgRoom_6504(uint64(m.Profit))
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovMsgRoom_6504(uint64(l))
		}
	}
	n += 1 + sovMsgRoom_6504(uint64(m.CardType))
	n += 1 + sovMsgRoom_6504(uint64(m.BetMulti))
	return n
}

func sovMsgRoom_6504(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgRoom_6504(x uint64) (n int) {
	return sovMsgRoom_6504(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PokerInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PokerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PokerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("point")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("color")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterRoomPush) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterRoomPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterRoomPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RolePos", wireType)
			}
			m.RolePos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RolePos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = append(m.Role, &RoomRoleInfo{})
			if err := m.Role[len(m.Role)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("role_pos")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRoomStagePush) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRoomStagePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRoomStagePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (MsgRoomStage(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTime", wireType)
			}
			m.TTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("stage")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("t_time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiListPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiListPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiListPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6504
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MultiList = append(m.MultiList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoom_6504
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgRoom_6504
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MultiList) == 0 {
					m.MultiList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgRoom_6504
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MultiList = append(m.MultiList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetMultiReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetMultiReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetMultiReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			m.Multi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("multi")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetMultiPush) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetMultiPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetMultiPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			m.Multi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("multi")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DealCardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DealCardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DealCardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &PokerInfo{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpreadCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpreadCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadCardPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpreadCardPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpreadCardPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &SpreadInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpreadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpreadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &PokerInfo{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("card_type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleChipPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleChipPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleChipPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &SettleInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chips", wireType)
			}
			m.Chips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chips |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("chips")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("profit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodeInfoResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (MsgRoomCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("code")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReloginInfoResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReloginInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReloginInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chips", wireType)
			}
			m.Chips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chips |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (MsgRoomStage(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTime", wireType)
			}
			m.TTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomAnte", wireType)
			}
			m.RoomAnte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomAnte |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = append(m.Role, &RoomRoleInfo{})
			if err := m.Role[len(m.Role)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("chips")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("stage")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("t_time")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("room_ante")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRoleInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRoleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRoleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			m.Avatar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avatar |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chips", wireType)
			}
			m.Chips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chips |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			m.Profit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &PokerInfo{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetMulti", wireType)
			}
			m.BetMulti = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BetMulti |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoom_6504(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoom_6504
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("avatar")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nickname")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pos")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("chips")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgRoom_6504(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgRoom_6504
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRoom_6504
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsgRoom_6504
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgRoom_6504
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgRoom_6504(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgRoom_6504 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgRoom_6504   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg_room_6504.proto", fileDescriptor_msg_room_6504_d64573970ee31493) }

var fileDescriptor_msg_room_6504_d64573970ee31493 = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4d, 0x4f, 0xe3, 0x46,
	0x18, 0xc7, 0xe3, 0x97, 0x84, 0xe4, 0x21, 0x4e, 0xcc, 0xf0, 0xa2, 0x94, 0xb6, 0x21, 0x58, 0x6d,
	0x95, 0x22, 0x35, 0x42, 0xa8, 0x70, 0xeb, 0x21, 0x2f, 0x16, 0x50, 0x11, 0x12, 0x39, 0xae, 0xd4,
	0x5e, 0x6a, 0x39, 0xc9, 0x00, 0x16, 0xb6, 0xc7, 0xd8, 0x03, 0x12, 0x1f, 0x62, 0xa5, 0xbd, 0xee,
	0x37, 0xe2, 0xc8, 0x71, 0x4f, 0xbb, 0x2b, 0xf8, 0x22, 0xab, 0x19, 0xe7, 0xc5, 0x0e, 0x4b, 0x56,
	0xbb, 0xb7, 0xf8, 0xf7, 0xcc, 0xfc, 0xe7, 0x3f, 0xcf, 0xf3, 0x9f, 0xc0, 0xba, 0x17, 0x5d, 0x5a,
	0x21, 0x21, 0x9e, 0x75, 0x74, 0xb8, 0xff, 0x67, 0x23, 0x08, 0x09, 0x25, 0x48, 0xa6, 0x43, 0xdf,
	0xd7, 0xda, 0x50, 0xe8, 0x93, 0x6b, 0x1c, 0x9e, 0xfa, 0x17, 0x04, 0x6d, 0x43, 0x36, 0x20, 0x8e,
	0x4f, 0x2b, 0x42, 0x4d, 0xac, 0x2b, 0x2d, 0xf9, 0xe1, 0xc3, 0x4e, 0xc6, 0x88, 0x11, 0xab, 0x8d,
	0x88, 0x4b, 0xc2, 0x8a, 0x98, 0xac, 0x71, 0xa4, 0xfd, 0x0b, 0x8a, 0xee, 0x53, 0x1c, 0x1a, 0x84,
	0x78, 0xfd, 0xdb, 0xe8, 0x0a, 0xed, 0x40, 0x3e, 0x24, 0x2e, 0xb6, 0x02, 0x12, 0xa5, 0xb4, 0x56,
	0x18, 0xed, 0x93, 0x08, 0xfd, 0x06, 0x32, 0xfb, 0x59, 0x11, 0x6b, 0x52, 0x7d, 0xf5, 0x00, 0x35,
	0x98, 0x97, 0x06, 0xdb, 0x6e, 0x10, 0x17, 0x33, 0x2f, 0x06, 0xaf, 0x6b, 0x43, 0x58, 0x1b, 0xdc,
	0xfb, 0x23, 0x56, 0x19, 0x50, 0xfb, 0x12, 0x73, 0xf5, 0x7d, 0xc8, 0x46, 0xec, 0x83, 0x4b, 0x97,
	0x0e, 0x36, 0xe2, 0xdd, 0xb3, 0x3b, 0xf2, 0xda, 0xd4, 0x20, 0xff, 0x40, 0x3f, 0x42, 0x8e, 0x5a,
	0xd4, 0xf1, 0x70, 0xda, 0x3d, 0x35, 0x1d, 0x0f, 0x6b, 0x0d, 0x50, 0xba, 0xb7, 0x2e, 0x75, 0xce,
	0x9c, 0x88, 0x72, 0xfd, 0x9f, 0x01, 0x3c, 0x06, 0x2c, 0xd7, 0x89, 0x58, 0x2f, 0xa4, 0xba, 0x62,
	0x14, 0xbc, 0xe9, 0x12, 0xed, 0x77, 0x58, 0x6d, 0x61, 0xca, 0xb7, 0x18, 0xf8, 0x86, 0x35, 0x86,
	0xd7, 0xd2, 0x4d, 0xe3, 0x48, 0x6b, 0x41, 0x71, 0xba, 0x94, 0x2b, 0x6f, 0x81, 0xb4, 0xd8, 0x12,
	0x06, 0xe6, 0x1a, 0xe2, 0x4b, 0x8d, 0x43, 0x28, 0x76, 0xb0, 0xed, 0xb6, 0xed, 0x70, 0x6c, 0xe0,
	0x28, 0x40, 0xbf, 0x42, 0x76, 0x64, 0x87, 0xe3, 0x88, 0x1b, 0x5b, 0x3d, 0x28, 0xc7, 0xb7, 0x9f,
	0x0d, 0xd1, 0x88, 0xab, 0x5a, 0x19, 0x94, 0x41, 0x10, 0x62, 0x7b, 0x1c, 0x6f, 0xbc, 0xd1, 0x8e,
	0xa0, 0x34, 0x07, 0xdc, 0xcd, 0x2f, 0x20, 0x3b, 0xfe, 0x05, 0x99, 0x08, 0xa9, 0xb1, 0x50, 0xbc,
	0x26, 0x1e, 0x01, 0xab, 0x6a, 0x3e, 0xc0, 0x9c, 0xbd, 0x7a, 0x83, 0x5d, 0x28, 0xb0, 0x73, 0x2d,
	0x7a, 0x1f, 0xa4, 0x9b, 0x9c, 0x67, 0xd8, 0xbc, 0x0f, 0xf0, 0xdc, 0xb8, 0xb4, 0xd4, 0x38, 0xf3,
	0x89, 0x29, 0x75, 0x71, 0xfb, 0xca, 0x09, 0x96, 0xf8, 0xe4, 0x6b, 0x12, 0x3e, 0xff, 0x07, 0x98,
	0xb3, 0x65, 0x9d, 0x1e, 0x5d, 0x39, 0x41, 0xc4, 0x3d, 0xca, 0xb3, 0x18, 0x33, 0x84, 0x7e, 0x82,
	0x5c, 0x10, 0x92, 0x0b, 0x87, 0x56, 0xa4, 0x9a, 0x58, 0x97, 0x26, 0xc5, 0x09, 0xd3, 0xfe, 0x82,
	0x62, 0x9b, 0x8c, 0xe3, 0x13, 0xd9, 0x1c, 0xfe, 0x00, 0x79, 0x44, 0xc6, 0xd3, 0x10, 0xae, 0x2f,
	0x84, 0x90, 0x95, 0x26, 0x02, 0x7c, 0x99, 0xf6, 0x51, 0x80, 0xb2, 0x81, 0x5d, 0x72, 0xe9, 0xf8,
	0x33, 0x89, 0xef, 0x31, 0x39, 0x0b, 0xbf, 0xf4, 0xed, 0xe1, 0x97, 0x5f, 0x84, 0x9f, 0xcd, 0x8d,
	0xef, 0xb3, 0x7d, 0x8a, 0x2b, 0xd9, 0xe4, 0xdc, 0x18, 0x6e, 0xfa, 0x14, 0xcf, 0xde, 0x6a, 0xee,
	0x2b, 0x6f, 0xf5, 0x8d, 0x08, 0xc5, 0x24, 0x66, 0xfd, 0xb4, 0xef, 0x6c, 0x6a, 0xa7, 0xff, 0x33,
	0x26, 0x0c, 0xd5, 0x20, 0xef, 0x3b, 0xa3, 0x6b, 0xdf, 0xf6, 0xe2, 0xbb, 0x14, 0xa6, 0x07, 0x4f,
	0xe9, 0xb4, 0x3d, 0xf2, 0xab, 0xed, 0xc9, 0x2e, 0x9b, 0x61, 0xae, 0x26, 0x2c, 0xce, 0x70, 0x1e,
	0xc1, 0x95, 0x65, 0x11, 0x4c, 0x87, 0x39, 0x5f, 0x13, 0xbe, 0x10, 0xe6, 0x5d, 0x28, 0x0c, 0x31,
	0xb5, 0xe2, 0x57, 0x5b, 0x48, 0x2e, 0x19, 0x4e, 0x1e, 0xfc, 0xde, 0x3b, 0x01, 0x4a, 0xe9, 0xb9,
	0xa0, 0x6d, 0xd8, 0x4a, 0x13, 0x2b, 0xc4, 0x11, 0x0e, 0xef, 0xb0, 0x9a, 0x41, 0x1b, 0xa0, 0x1a,
	0xbd, 0x5e, 0xd7, 0x1a, 0x98, 0xcd, 0x63, 0xdd, 0x32, 0xf4, 0x66, 0xe7, 0x3f, 0x55, 0x40, 0x08,
	0x4a, 0x09, 0xda, 0xd2, 0x4d, 0x55, 0x44, 0xeb, 0x50, 0x4e, 0xb0, 0x8e, 0xde, 0x3c, 0x53, 0x25,
	0xb4, 0x09, 0x6b, 0x09, 0x38, 0xe8, 0x1b, 0xcd, 0x8e, 0xae, 0xca, 0x8b, 0x58, 0x37, 0xcd, 0x33,
	0x5d, 0xcd, 0xee, 0x8d, 0x41, 0x49, 0x45, 0x15, 0xfd, 0x00, 0x9b, 0x29, 0x90, 0x30, 0xb6, 0x05,
	0xe8, 0x6f, 0xdd, 0x34, 0x4f, 0x7b, 0xe7, 0xd6, 0x79, 0xcf, 0xb4, 0xf4, 0xf3, 0xde, 0x3f, 0xc7,
	0x27, 0xaa, 0x80, 0xd6, 0x40, 0x69, 0xe9, 0x26, 0x67, 0xdd, 0xa6, 0xd9, 0x3e, 0x51, 0x45, 0xa4,
	0x40, 0x61, 0x60, 0xf6, 0xfa, 0xd6, 0x71, 0xb3, 0xab, 0xab, 0x52, 0xab, 0xf2, 0xf0, 0x54, 0x15,
	0x1e, 0x9f, 0xaa, 0xc2, 0xa7, 0xa7, 0xaa, 0xf0, 0xf6, 0xb9, 0x9a, 0x79, 0x7c, 0xae, 0x66, 0xde,
	0x3f, 0x57, 0x33, 0x9f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x82, 0x80, 0x96, 0x92, 0x06, 0x00,
	0x00,
}
