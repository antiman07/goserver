// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_login.proto

package suoha

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LoginModeCode int32

const (
	LoginModeCode_login_mode_code_reserve1 LoginModeCode = 0
	LoginModeCode_normal                   LoginModeCode = 1
	LoginModeCode_reconnect                LoginModeCode = 2
)

var LoginModeCode_name = map[int32]string{
	0: "login_mode_code_reserve1",
	1: "normal",
	2: "reconnect",
}
var LoginModeCode_value = map[string]int32{
	"login_mode_code_reserve1": 0,
	"normal":                   1,
	"reconnect":                2,
}

func (x LoginModeCode) Enum() *LoginModeCode {
	p := new(LoginModeCode)
	*p = x
	return p
}
func (x LoginModeCode) String() string {
	return proto.EnumName(LoginModeCode_name, int32(x))
}
func (x *LoginModeCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LoginModeCode_value, data, "LoginModeCode")
	if err != nil {
		return err
	}
	*x = LoginModeCode(value)
	return nil
}
func (LoginModeCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_login_88b180fa4bb5c47c, []int{0}
}

type LoginCode int32

const (
	LoginCode_login_code_reserve LoginCode = 0
	LoginCode_login_success      LoginCode = 1
	LoginCode_login_fail         LoginCode = 2
	LoginCode_err_account        LoginCode = 3
	LoginCode_token_timeout      LoginCode = 4
	LoginCode_token_error        LoginCode = 5
	LoginCode_other_login        LoginCode = 6
	LoginCode_force_kick         LoginCode = 7
	LoginCode_stop_notice        LoginCode = 8
)

var LoginCode_name = map[int32]string{
	0: "login_code_reserve",
	1: "login_success",
	2: "login_fail",
	3: "err_account",
	4: "token_timeout",
	5: "token_error",
	6: "other_login",
	7: "force_kick",
	8: "stop_notice",
}
var LoginCode_value = map[string]int32{
	"login_code_reserve": 0,
	"login_success":      1,
	"login_fail":         2,
	"err_account":        3,
	"token_timeout":      4,
	"token_error":        5,
	"other_login":        6,
	"force_kick":         7,
	"stop_notice":        8,
}

func (x LoginCode) Enum() *LoginCode {
	p := new(LoginCode)
	*p = x
	return p
}
func (x LoginCode) String() string {
	return proto.EnumName(LoginCode_name, int32(x))
}
func (x *LoginCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LoginCode_value, data, "LoginCode")
	if err != nil {
		return err
	}
	*x = LoginCode(value)
	return nil
}
func (LoginCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_login_88b180fa4bb5c47c, []int{1}
}

type LoginReq struct {
	Code  LoginModeCode    `protobuf:"varint,1,req,name=code,enum=suoha.LoginModeCode" json:"code"`
	Token string           `protobuf:"bytes,2,req,name=token" json:"token"`
	Lang  string           `protobuf:"bytes,3,req,name=lang" json:"lang"`
	Gt    GameTerminalType `protobuf:"varint,4,req,name=gt,enum=suoha.GameTerminalType" json:"gt"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_login_88b180fa4bb5c47c, []int{0}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(dst, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetCode() LoginModeCode {
	if m != nil {
		return m.Code
	}
	return LoginModeCode_login_mode_code_reserve1
}

func (m *LoginReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginReq) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *LoginReq) GetGt() GameTerminalType {
	if m != nil {
		return m.Gt
	}
	return GameTerminalType_game_terminal_type_reserve
}

type LoginResp struct {
	Code           LoginCode `protobuf:"varint,1,req,name=code,enum=suoha.LoginCode" json:"code"`
	Role           *RoleInfo `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	ReconnectToken string    `protobuf:"bytes,3,opt,name=reconnect_token,json=reconnectToken" json:"reconnect_token"`
	GameMode       uint32    `protobuf:"varint,4,opt,name=game_mode,json=gameMode" json:"game_mode"`
	StateFlag      uint32    `protobuf:"varint,5,opt,name=state_flag,json=stateFlag" json:"state_flag"`
	GmSwitch       bool      `protobuf:"varint,6,opt,name=gm_switch,json=gmSwitch" json:"gm_switch"`
}

func (m *LoginResp) Reset()         { *m = LoginResp{} }
func (m *LoginResp) String() string { return proto.CompactTextString(m) }
func (*LoginResp) ProtoMessage()    {}
func (*LoginResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_login_88b180fa4bb5c47c, []int{1}
}
func (m *LoginResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResp.Merge(dst, src)
}
func (m *LoginResp) XXX_Size() int {
	return m.Size()
}
func (m *LoginResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResp proto.InternalMessageInfo

func (m *LoginResp) GetCode() LoginCode {
	if m != nil {
		return m.Code
	}
	return LoginCode_login_code_reserve
}

func (m *LoginResp) GetRole() *RoleInfo {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *LoginResp) GetReconnectToken() string {
	if m != nil {
		return m.ReconnectToken
	}
	return ""
}

func (m *LoginResp) GetGameMode() uint32 {
	if m != nil {
		return m.GameMode
	}
	return 0
}

func (m *LoginResp) GetStateFlag() uint32 {
	if m != nil {
		return m.StateFlag
	}
	return 0
}

func (m *LoginResp) GetGmSwitch() bool {
	if m != nil {
		return m.GmSwitch
	}
	return false
}

type LoginAccountReq struct {
	Account string           `protobuf:"bytes,1,req,name=account" json:"account"`
	Token   string           `protobuf:"bytes,2,req,name=token" json:"token"`
	Lang    string           `protobuf:"bytes,3,req,name=lang" json:"lang"`
	Gt      GameTerminalType `protobuf:"varint,4,req,name=gt,enum=suoha.GameTerminalType" json:"gt"`
	GameId  uint32           `protobuf:"varint,5,req,name=game_id,json=gameId" json:"game_id"`
}

func (m *LoginAccountReq) Reset()         { *m = LoginAccountReq{} }
func (m *LoginAccountReq) String() string { return proto.CompactTextString(m) }
func (*LoginAccountReq) ProtoMessage()    {}
func (*LoginAccountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_login_88b180fa4bb5c47c, []int{2}
}
func (m *LoginAccountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginAccountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginAccountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginAccountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginAccountReq.Merge(dst, src)
}
func (m *LoginAccountReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginAccountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginAccountReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginAccountReq proto.InternalMessageInfo

func (m *LoginAccountReq) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginAccountReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginAccountReq) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *LoginAccountReq) GetGt() GameTerminalType {
	if m != nil {
		return m.Gt
	}
	return GameTerminalType_game_terminal_type_reserve
}

func (m *LoginAccountReq) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

type KickResp struct {
	Code LoginCode `protobuf:"varint,1,req,name=code,enum=suoha.LoginCode" json:"code"`
}

func (m *KickResp) Reset()         { *m = KickResp{} }
func (m *KickResp) String() string { return proto.CompactTextString(m) }
func (*KickResp) ProtoMessage()    {}
func (*KickResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_login_88b180fa4bb5c47c, []int{3}
}
func (m *KickResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KickResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickResp.Merge(dst, src)
}
func (m *KickResp) XXX_Size() int {
	return m.Size()
}
func (m *KickResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KickResp.DiscardUnknown(m)
}

var xxx_messageInfo_KickResp proto.InternalMessageInfo

func (m *KickResp) GetCode() LoginCode {
	if m != nil {
		return m.Code
	}
	return LoginCode_login_code_reserve
}

type UpdateTokenResp struct {
	ReconnectToken string `protobuf:"bytes,1,opt,name=reconnect_token,json=reconnectToken" json:"reconnect_token"`
}

func (m *UpdateTokenResp) Reset()         { *m = UpdateTokenResp{} }
func (m *UpdateTokenResp) String() string { return proto.CompactTextString(m) }
func (*UpdateTokenResp) ProtoMessage()    {}
func (*UpdateTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_login_88b180fa4bb5c47c, []int{4}
}
func (m *UpdateTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTokenResp.Merge(dst, src)
}
func (m *UpdateTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTokenResp proto.InternalMessageInfo

func (m *UpdateTokenResp) GetReconnectToken() string {
	if m != nil {
		return m.ReconnectToken
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginReq)(nil), "suoha.LoginReq")
	proto.RegisterType((*LoginResp)(nil), "suoha.LoginResp")
	proto.RegisterType((*LoginAccountReq)(nil), "suoha.LoginAccountReq")
	proto.RegisterType((*KickResp)(nil), "suoha.KickResp")
	proto.RegisterType((*UpdateTokenResp)(nil), "suoha.UpdateTokenResp")
	proto.RegisterEnum("suoha.LoginModeCode", LoginModeCode_name, LoginModeCode_value)
	proto.RegisterEnum("suoha.LoginCode", LoginCode_name, LoginCode_value)
}
func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(m.Code))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(len(m.Token)))
	i += copy(dAtA[i:], m.Token)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(len(m.Lang)))
	i += copy(dAtA[i:], m.Lang)
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(m.Gt))
	return i, nil
}

func (m *LoginResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(m.Code))
	if m.Role != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgLogin(dAtA, i, uint64(m.Role.Size()))
		n1, err := m.Role.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(len(m.ReconnectToken)))
	i += copy(dAtA[i:], m.ReconnectToken)
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(m.GameMode))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(m.StateFlag))
	dAtA[i] = 0x30
	i++
	if m.GmSwitch {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *LoginAccountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginAccountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(len(m.Account)))
	i += copy(dAtA[i:], m.Account)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(len(m.Token)))
	i += copy(dAtA[i:], m.Token)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(len(m.Lang)))
	i += copy(dAtA[i:], m.Lang)
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(m.Gt))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(m.GameId))
	return i, nil
}

func (m *KickResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(m.Code))
	return i, nil
}

func (m *UpdateTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTokenResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMsgLogin(dAtA, i, uint64(len(m.ReconnectToken)))
	i += copy(dAtA[i:], m.ReconnectToken)
	return i, nil
}

func encodeVarintMsgLogin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgLogin(uint64(m.Code))
	l = len(m.Token)
	n += 1 + l + sovMsgLogin(uint64(l))
	l = len(m.Lang)
	n += 1 + l + sovMsgLogin(uint64(l))
	n += 1 + sovMsgLogin(uint64(m.Gt))
	return n
}

func (m *LoginResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgLogin(uint64(m.Code))
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovMsgLogin(uint64(l))
	}
	l = len(m.ReconnectToken)
	n += 1 + l + sovMsgLogin(uint64(l))
	n += 1 + sovMsgLogin(uint64(m.GameMode))
	n += 1 + sovMsgLogin(uint64(m.StateFlag))
	n += 2
	return n
}

func (m *LoginAccountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	n += 1 + l + sovMsgLogin(uint64(l))
	l = len(m.Token)
	n += 1 + l + sovMsgLogin(uint64(l))
	l = len(m.Lang)
	n += 1 + l + sovMsgLogin(uint64(l))
	n += 1 + sovMsgLogin(uint64(m.Gt))
	n += 1 + sovMsgLogin(uint64(m.GameId))
	return n
}

func (m *KickResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgLogin(uint64(m.Code))
	return n
}

func (m *UpdateTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReconnectToken)
	n += 1 + l + sovMsgLogin(uint64(l))
	return n
}

func sovMsgLogin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgLogin(x uint64) (n int) {
	return sovMsgLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (LoginModeCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= (GameTerminalType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("code")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("token")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lang")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("gt")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (LoginCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgLogin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &RoleInfo{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReconnectToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReconnectToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMode", wireType)
			}
			m.GameMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateFlag", wireType)
			}
			m.StateFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateFlag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GmSwitch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GmSwitch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("code")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginAccountReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginAccountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginAccountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= (GameTerminalType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("account")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("token")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lang")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("gt")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("game_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (LoginCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("code")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReconnectToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReconnectToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsgLogin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgLogin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgLogin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgLogin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgLogin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg_login.proto", fileDescriptor_msg_login_88b180fa4bb5c47c) }

var fileDescriptor_msg_login_88b180fa4bb5c47c = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0x3d, 0x8f, 0xd3, 0x4c,
	0x10, 0xc7, 0xbd, 0x8e, 0xf3, 0x36, 0xa7, 0xc4, 0x7b, 0x2b, 0x3d, 0xa7, 0x7d, 0x4e, 0x60, 0x4c,
	0x68, 0xa2, 0x43, 0x04, 0xb8, 0x86, 0x16, 0xae, 0x40, 0x3a, 0x5e, 0x9a, 0x00, 0xf5, 0x6a, 0xb5,
	0xde, 0x38, 0x56, 0x6c, 0x6f, 0x58, 0x6f, 0x40, 0x7c, 0x0b, 0xbe, 0x03, 0x3d, 0x2d, 0x5f, 0xe1,
	0xca, 0x2b, 0xa9, 0x10, 0x4a, 0x3e, 0x04, 0x2d, 0xda, 0xb5, 0x93, 0x7b, 0x01, 0x0a, 0x1a, 0xca,
	0xfd, 0xcd, 0x7f, 0x66, 0xfe, 0x33, 0x63, 0x43, 0x58, 0x54, 0x29, 0xcb, 0x55, 0x9a, 0x95, 0x93,
	0xa5, 0x56, 0x46, 0x91, 0x76, 0xb5, 0x52, 0x73, 0x7e, 0xf8, 0x9f, 0xe5, 0x5a, 0xe5, 0x92, 0x09,
	0x55, 0x14, 0xaa, 0x89, 0x8e, 0x3e, 0x21, 0xe8, 0xbd, 0xb0, 0xea, 0xa9, 0x7c, 0x4b, 0x1e, 0x40,
	0x20, 0x54, 0x22, 0x29, 0x8a, 0xfd, 0xf1, 0xf0, 0xf8, 0x60, 0xe2, 0x32, 0x27, 0xae, 0x18, 0x2b,
	0x54, 0x62, 0x53, 0x13, 0x79, 0x12, 0x9c, 0x7d, 0xbb, 0xe5, 0x4d, 0x9d, 0x92, 0x1c, 0x42, 0xdb,
	0xa8, 0x85, 0x2c, 0xa9, 0x1f, 0xfb, 0xe3, 0x7e, 0x13, 0xaa, 0x11, 0xa1, 0x10, 0xe4, 0xbc, 0x4c,
	0x69, 0xeb, 0x52, 0xc8, 0x11, 0x72, 0x1f, 0xfc, 0xd4, 0xd0, 0xc0, 0x75, 0xf9, 0xbf, 0xe9, 0x92,
	0xf2, 0x42, 0x32, 0x23, 0x75, 0x91, 0x95, 0x3c, 0x67, 0xe6, 0xc3, 0x72, 0xdb, 0xc8, 0x4f, 0xcd,
	0xe8, 0x07, 0x82, 0x7e, 0xe3, 0xb2, 0x5a, 0x92, 0xbb, 0x57, 0x6c, 0xee, 0x5f, 0xb1, 0xf9, 0x8b,
	0xc3, 0x3b, 0x10, 0xd8, 0xa9, 0xa9, 0x1f, 0xa3, 0xf1, 0xde, 0x71, 0xd8, 0x88, 0xa7, 0x2a, 0x97,
	0xa7, 0xe5, 0x4c, 0x4d, 0x5d, 0x90, 0xdc, 0x83, 0x50, 0x4b, 0xa1, 0xca, 0x52, 0x0a, 0xc3, 0xea,
	0x81, 0x5a, 0x31, 0xda, 0xb9, 0x1e, 0xee, 0x82, 0xaf, 0xdd, 0x64, 0xb7, 0xa1, 0xef, 0xec, 0xda,
	0x9d, 0xd0, 0x20, 0x46, 0xe3, 0x41, 0x23, 0xec, 0x59, 0xfc, 0xb2, 0x6e, 0x0b, 0x95, 0xe1, 0x46,
	0xb2, 0x59, 0xce, 0x53, 0xda, 0xbe, 0xa4, 0xe9, 0x3b, 0xfe, 0x34, 0xe7, 0xa9, 0xab, 0x53, 0xb0,
	0xea, 0x7d, 0x66, 0xc4, 0x9c, 0x76, 0x62, 0x34, 0xee, 0xed, 0xea, 0x14, 0xaf, 0x1c, 0x1d, 0x7d,
	0x41, 0x10, 0xba, 0xc9, 0x9f, 0x08, 0xa1, 0x56, 0xa5, 0xb1, 0x67, 0x8a, 0xa0, 0xcb, 0xeb, 0x97,
	0x5b, 0xc1, 0xd6, 0xe5, 0x16, 0xfe, 0xa3, 0xa3, 0x90, 0x9b, 0xd0, 0x75, 0xf1, 0x2c, 0xa1, 0xed,
	0xd8, 0xdf, 0xcd, 0xd7, 0xb1, 0xf0, 0x34, 0x19, 0x3d, 0x82, 0xde, 0xf3, 0x4c, 0x2c, 0xfe, 0xfa,
	0x62, 0xa3, 0xc7, 0x10, 0xbe, 0x59, 0x26, 0xdc, 0x48, 0xb7, 0x6c, 0x97, 0xff, 0x9b, 0xfb, 0xa0,
	0x3f, 0xdf, 0xe7, 0xe8, 0x19, 0x84, 0xd7, 0x3e, 0x5a, 0x72, 0x03, 0xe8, 0x35, 0xc4, 0xb4, 0xac,
	0xa4, 0x7e, 0x27, 0x1f, 0x62, 0x8f, 0x00, 0x74, 0x4a, 0xa5, 0x0b, 0x9e, 0x63, 0x44, 0x06, 0xd0,
	0xdf, 0x95, 0xc3, 0xfe, 0xd1, 0x67, 0x04, 0x70, 0x61, 0x94, 0x1c, 0x00, 0xb9, 0x78, 0x6d, 0x4b,
	0x60, 0x8f, 0xec, 0xc3, 0xa0, 0xe6, 0xd5, 0x4a, 0x08, 0x59, 0x55, 0x18, 0x91, 0xe1, 0x36, 0x71,
	0xc6, 0xb3, 0x1c, 0xfb, 0x24, 0x84, 0x3d, 0xa9, 0x35, 0x6b, 0xae, 0x84, 0x5b, 0x36, 0xc7, 0xcd,
	0xc2, 0x4c, 0x56, 0x48, 0xb5, 0x32, 0x38, 0xb0, 0x9a, 0x1a, 0x49, 0xad, 0x95, 0xc6, 0x6d, 0x0b,
	0x94, 0x99, 0x4b, 0x5d, 0xff, 0xd2, 0xb8, 0x63, 0xab, 0xce, 0x94, 0x16, 0x92, 0x2d, 0x32, 0xb1,
	0xc0, 0x5d, 0x2b, 0xa8, 0x8c, 0x5a, 0xb2, 0x52, 0x99, 0x4c, 0x48, 0xdc, 0x3b, 0xa1, 0x67, 0xeb,
	0x08, 0x9d, 0xaf, 0x23, 0xf4, 0x7d, 0x1d, 0xa1, 0x8f, 0x9b, 0xc8, 0x3b, 0xdf, 0x44, 0xde, 0xd7,
	0x4d, 0xe4, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x32, 0x1a, 0xb4, 0x1b, 0x04, 0x00, 0x00,
}
