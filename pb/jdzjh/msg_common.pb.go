// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_common.proto

package jdzjh

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Undefined struct {
}

func (m *Undefined) Reset()         { *m = Undefined{} }
func (m *Undefined) String() string { return proto.CompactTextString(m) }
func (*Undefined) ProtoMessage()    {}
func (*Undefined) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_common_46d05b7e01289b2e, []int{0}
}
func (m *Undefined) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Undefined) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Undefined.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Undefined) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Undefined.Merge(dst, src)
}
func (m *Undefined) XXX_Size() int {
	return m.Size()
}
func (m *Undefined) XXX_DiscardUnknown() {
	xxx_messageInfo_Undefined.DiscardUnknown(m)
}

var xxx_messageInfo_Undefined proto.InternalMessageInfo

type DmsgContent struct {
	MsgType string `protobuf:"bytes,1,req,name=msg_type,json=msgType" json:"msg_type"`
	Chars   string `protobuf:"bytes,2,opt,name=chars" json:"chars"`
	Number  uint64 `protobuf:"varint,3,opt,name=number" json:"number"`
	Id      uint32 `protobuf:"varint,4,opt,name=id" json:"id"`
}

func (m *DmsgContent) Reset()         { *m = DmsgContent{} }
func (m *DmsgContent) String() string { return proto.CompactTextString(m) }
func (*DmsgContent) ProtoMessage()    {}
func (*DmsgContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_common_46d05b7e01289b2e, []int{1}
}
func (m *DmsgContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DmsgContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DmsgContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DmsgContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DmsgContent.Merge(dst, src)
}
func (m *DmsgContent) XXX_Size() int {
	return m.Size()
}
func (m *DmsgContent) XXX_DiscardUnknown() {
	xxx_messageInfo_DmsgContent.DiscardUnknown(m)
}

var xxx_messageInfo_DmsgContent proto.InternalMessageInfo

func (m *DmsgContent) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *DmsgContent) GetChars() string {
	if m != nil {
		return m.Chars
	}
	return ""
}

func (m *DmsgContent) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *DmsgContent) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 消息
type Dmsg struct {
	Id      uint32         `protobuf:"varint,1,req,name=id" json:"id"`
	Content []*DmsgContent `protobuf:"bytes,2,rep,name=content" json:"content,omitempty"`
}

func (m *Dmsg) Reset()         { *m = Dmsg{} }
func (m *Dmsg) String() string { return proto.CompactTextString(m) }
func (*Dmsg) ProtoMessage()    {}
func (*Dmsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_common_46d05b7e01289b2e, []int{2}
}
func (m *Dmsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dmsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dmsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Dmsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dmsg.Merge(dst, src)
}
func (m *Dmsg) XXX_Size() int {
	return m.Size()
}
func (m *Dmsg) XXX_DiscardUnknown() {
	xxx_messageInfo_Dmsg.DiscardUnknown(m)
}

var xxx_messageInfo_Dmsg proto.InternalMessageInfo

func (m *Dmsg) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Dmsg) GetContent() []*DmsgContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Undefined)(nil), "jdzjh.Undefined")
	proto.RegisterType((*DmsgContent)(nil), "jdzjh.DmsgContent")
	proto.RegisterType((*Dmsg)(nil), "jdzjh.Dmsg")
}
func (m *Undefined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Undefined) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DmsgContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmsgContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMsgCommon(dAtA, i, uint64(len(m.MsgType)))
	i += copy(dAtA[i:], m.MsgType)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMsgCommon(dAtA, i, uint64(len(m.Chars)))
	i += copy(dAtA[i:], m.Chars)
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgCommon(dAtA, i, uint64(m.Number))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgCommon(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *Dmsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dmsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgCommon(dAtA, i, uint64(m.Id))
	if len(m.Content) > 0 {
		for _, msg := range m.Content {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsgCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMsgCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Undefined) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DmsgContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgType)
	n += 1 + l + sovMsgCommon(uint64(l))
	l = len(m.Chars)
	n += 1 + l + sovMsgCommon(uint64(l))
	n += 1 + sovMsgCommon(uint64(m.Number))
	n += 1 + sovMsgCommon(uint64(m.Id))
	return n
}

func (m *Dmsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgCommon(uint64(m.Id))
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovMsgCommon(uint64(l))
		}
	}
	return n
}

func sovMsgCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgCommon(x uint64) (n int) {
	return sovMsgCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Undefined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Undefined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Undefined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DmsgContent) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmsgContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmsgContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chars = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("msg_type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dmsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dmsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dmsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &DmsgContent{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsgCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgCommon   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg_common.proto", fileDescriptor_msg_common_46d05b7e01289b2e) }

var fileDescriptor_msg_common_46d05b7e01289b2e = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x2d, 0x4e, 0x8f,
	0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0x4a,
	0xa9, 0xca, 0xca, 0x50, 0xe2, 0xe6, 0xe2, 0x0c, 0xcd, 0x4b, 0x49, 0x4d, 0xcb, 0xcc, 0x4b, 0x4d,
	0x51, 0xaa, 0xe3, 0xe2, 0x76, 0xc9, 0x2d, 0x4e, 0x77, 0xce, 0xcf, 0x2b, 0x49, 0xcd, 0x2b, 0x11,
	0x92, 0xe7, 0xe2, 0x00, 0x69, 0x2b, 0xa9, 0x2c, 0x48, 0x95, 0x60, 0x54, 0x60, 0xd2, 0xe0, 0x74,
	0x62, 0x39, 0x71, 0x4f, 0x9e, 0x21, 0x88, 0x3d, 0xb7, 0x38, 0x3d, 0xa4, 0xb2, 0x20, 0x55, 0x48,
	0x8a, 0x8b, 0x35, 0x39, 0x23, 0xb1, 0xa8, 0x58, 0x82, 0x49, 0x81, 0x11, 0x2e, 0x0b, 0x11, 0x12,
	0x92, 0xe1, 0x62, 0xcb, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0x92, 0x60, 0x56, 0x60, 0xd4, 0x60, 0x81,
	0x4a, 0x42, 0xc5, 0x84, 0x44, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x58, 0x14, 0x18, 0x35, 0x78, 0xa1,
	0x32, 0x4c, 0x99, 0x29, 0x4a, 0x5e, 0x5c, 0x2c, 0x20, 0xfb, 0xa1, 0xb2, 0x20, 0x2b, 0x91, 0x64,
	0x85, 0x74, 0xb8, 0xd8, 0x93, 0x21, 0x2e, 0x93, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x36, 0x12, 0xd2,
	0x03, 0xfb, 0x41, 0x0f, 0xc9, 0xcd, 0x41, 0x30, 0x25, 0x4e, 0x12, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31,
	0xdc, 0x78, 0x2c, 0xc7, 0x00, 0x08, 0x00, 0x00, 0xff, 0xff, 0x75, 0xd4, 0x85, 0x5c, 0x0c, 0x01,
	0x00, 0x00,
}
