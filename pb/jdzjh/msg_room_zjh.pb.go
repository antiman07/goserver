// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_room_zjh.proto

package jdzjh

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GamePlayerInfoPush struct {
	PlayerInfos []*PlayerInfo `protobuf:"bytes,1,rep,name=player_infos,json=playerInfos" json:"player_infos,omitempty"`
}

func (m *GamePlayerInfoPush) Reset()         { *m = GamePlayerInfoPush{} }
func (m *GamePlayerInfoPush) String() string { return proto.CompactTextString(m) }
func (*GamePlayerInfoPush) ProtoMessage()    {}
func (*GamePlayerInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{0}
}
func (m *GamePlayerInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlayerInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlayerInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GamePlayerInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlayerInfoPush.Merge(dst, src)
}
func (m *GamePlayerInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *GamePlayerInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlayerInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlayerInfoPush proto.InternalMessageInfo

func (m *GamePlayerInfoPush) GetPlayerInfos() []*PlayerInfo {
	if m != nil {
		return m.PlayerInfos
	}
	return nil
}

type PlayerInfo struct {
	Pos      uint32 `protobuf:"varint,1,opt,name=pos" json:"pos"`
	Nickname string `protobuf:"bytes,2,req,name=nickname" json:"nickname"`
	Avatar   uint32 `protobuf:"varint,3,req,name=avatar" json:"avatar"`
	Chips    uint64 `protobuf:"varint,4,opt,name=chips" json:"chips"`
	IsYours  uint32 `protobuf:"varint,5,opt,name=is_yours,json=isYours" json:"is_yours"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{1}
}
func (m *PlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfo.Merge(dst, src)
}
func (m *PlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfo proto.InternalMessageInfo

func (m *PlayerInfo) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *PlayerInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *PlayerInfo) GetAvatar() uint32 {
	if m != nil {
		return m.Avatar
	}
	return 0
}

func (m *PlayerInfo) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *PlayerInfo) GetIsYours() uint32 {
	if m != nil {
		return m.IsYours
	}
	return 0
}

// 游戏逻辑相关推送
type GamePush struct {
	Type  uint32 `protobuf:"varint,1,req,name=type" json:"type"`
	KeyId uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId" json:"key_id"`
	// 当 type == 1时，这里庄家seat_Id
	// 当 type == 3、4、5、6、7、8时，这里是玩家seat_Id
	// 当 type == 9 时，这里是发起比牌的玩家 seat_Id
	ValueList []uint64 `protobuf:"varint,3,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
}

func (m *GamePush) Reset()         { *m = GamePush{} }
func (m *GamePush) String() string { return proto.CompactTextString(m) }
func (*GamePush) ProtoMessage()    {}
func (*GamePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{2}
}
func (m *GamePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GamePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePush.Merge(dst, src)
}
func (m *GamePush) XXX_Size() int {
	return m.Size()
}
func (m *GamePush) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePush.DiscardUnknown(m)
}

var xxx_messageInfo_GamePush proto.InternalMessageInfo

func (m *GamePush) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GamePush) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GamePush) GetValueList() []uint64 {
	if m != nil {
		return m.ValueList
	}
	return nil
}

type UserOperationReq struct {
	OperationKey   uint32 `protobuf:"varint,1,req,name=operation_key,json=operationKey" json:"operation_key"`
	OperationValue uint32 `protobuf:"varint,2,opt,name=operation_value,json=operationValue" json:"operation_value"`
}

func (m *UserOperationReq) Reset()         { *m = UserOperationReq{} }
func (m *UserOperationReq) String() string { return proto.CompactTextString(m) }
func (*UserOperationReq) ProtoMessage()    {}
func (*UserOperationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{3}
}
func (m *UserOperationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserOperationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserOperationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserOperationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOperationReq.Merge(dst, src)
}
func (m *UserOperationReq) XXX_Size() int {
	return m.Size()
}
func (m *UserOperationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOperationReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserOperationReq proto.InternalMessageInfo

func (m *UserOperationReq) GetOperationKey() uint32 {
	if m != nil {
		return m.OperationKey
	}
	return 0
}

func (m *UserOperationReq) GetOperationValue() uint32 {
	if m != nil {
		return m.OperationValue
	}
	return 0
}

type UserOperationResp struct {
	Result       uint32 `protobuf:"varint,1,req,name=result" json:"result"`
	OperationKey uint32 `protobuf:"varint,2,req,name=operation_key,json=operationKey" json:"operation_key"`
}

func (m *UserOperationResp) Reset()         { *m = UserOperationResp{} }
func (m *UserOperationResp) String() string { return proto.CompactTextString(m) }
func (*UserOperationResp) ProtoMessage()    {}
func (*UserOperationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{4}
}
func (m *UserOperationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserOperationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserOperationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserOperationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOperationResp.Merge(dst, src)
}
func (m *UserOperationResp) XXX_Size() int {
	return m.Size()
}
func (m *UserOperationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOperationResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserOperationResp proto.InternalMessageInfo

func (m *UserOperationResp) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *UserOperationResp) GetOperationKey() uint32 {
	if m != nil {
		return m.OperationKey
	}
	return 0
}

type GameSettlementPush struct {
	Result []*GameResult `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *GameSettlementPush) Reset()         { *m = GameSettlementPush{} }
func (m *GameSettlementPush) String() string { return proto.CompactTextString(m) }
func (*GameSettlementPush) ProtoMessage()    {}
func (*GameSettlementPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{5}
}
func (m *GameSettlementPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameSettlementPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameSettlementPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GameSettlementPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameSettlementPush.Merge(dst, src)
}
func (m *GameSettlementPush) XXX_Size() int {
	return m.Size()
}
func (m *GameSettlementPush) XXX_DiscardUnknown() {
	xxx_messageInfo_GameSettlementPush.DiscardUnknown(m)
}

var xxx_messageInfo_GameSettlementPush proto.InternalMessageInfo

func (m *GameSettlementPush) GetResult() []*GameResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type GameResult struct {
	IsWinner bool   `protobuf:"varint,1,req,name=is_winner,json=isWinner" json:"is_winner"`
	SeatId   uint64 `protobuf:"varint,2,req,name=seat_id,json=seatId" json:"seat_id"`
	Result   int64  `protobuf:"zigzag64,3,req,name=result" json:"result"`
}

func (m *GameResult) Reset()         { *m = GameResult{} }
func (m *GameResult) String() string { return proto.CompactTextString(m) }
func (*GameResult) ProtoMessage()    {}
func (*GameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{6}
}
func (m *GameResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameResult.Merge(dst, src)
}
func (m *GameResult) XXX_Size() int {
	return m.Size()
}
func (m *GameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GameResult.DiscardUnknown(m)
}

var xxx_messageInfo_GameResult proto.InternalMessageInfo

func (m *GameResult) GetIsWinner() bool {
	if m != nil {
		return m.IsWinner
	}
	return false
}

func (m *GameResult) GetSeatId() uint64 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *GameResult) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type GmReq struct {
	RoomType     uint32         `protobuf:"varint,1,req,name=room_type,json=roomType" json:"room_type"`
	PlayerNum    uint32         `protobuf:"varint,2,req,name=player_num,json=playerNum" json:"player_num"`
	PlayersCards []*PlayerCards `protobuf:"bytes,5,rep,name=players_cards,json=playersCards" json:"players_cards,omitempty"`
}

func (m *GmReq) Reset()         { *m = GmReq{} }
func (m *GmReq) String() string { return proto.CompactTextString(m) }
func (*GmReq) ProtoMessage()    {}
func (*GmReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{7}
}
func (m *GmReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GmReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GmReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GmReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GmReq.Merge(dst, src)
}
func (m *GmReq) XXX_Size() int {
	return m.Size()
}
func (m *GmReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GmReq.DiscardUnknown(m)
}

var xxx_messageInfo_GmReq proto.InternalMessageInfo

func (m *GmReq) GetRoomType() uint32 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func (m *GmReq) GetPlayerNum() uint32 {
	if m != nil {
		return m.PlayerNum
	}
	return 0
}

func (m *GmReq) GetPlayersCards() []*PlayerCards {
	if m != nil {
		return m.PlayersCards
	}
	return nil
}

type PlayerCards struct {
	SeatId uint32   `protobuf:"varint,1,req,name=seat_id,json=seatId" json:"seat_id"`
	Cards  []uint64 `protobuf:"varint,2,rep,name=cards" json:"cards,omitempty"`
}

func (m *PlayerCards) Reset()         { *m = PlayerCards{} }
func (m *PlayerCards) String() string { return proto.CompactTextString(m) }
func (*PlayerCards) ProtoMessage()    {}
func (*PlayerCards) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{8}
}
func (m *PlayerCards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerCards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerCards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerCards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCards.Merge(dst, src)
}
func (m *PlayerCards) XXX_Size() int {
	return m.Size()
}
func (m *PlayerCards) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCards.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCards proto.InternalMessageInfo

func (m *PlayerCards) GetSeatId() uint32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *PlayerCards) GetCards() []uint64 {
	if m != nil {
		return m.Cards
	}
	return nil
}

type GmResp struct {
	Result uint32 `protobuf:"varint,1,req,name=result" json:"result"`
}

func (m *GmResp) Reset()         { *m = GmResp{} }
func (m *GmResp) String() string { return proto.CompactTextString(m) }
func (*GmResp) ProtoMessage()    {}
func (*GmResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{9}
}
func (m *GmResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GmResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GmResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GmResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GmResp.Merge(dst, src)
}
func (m *GmResp) XXX_Size() int {
	return m.Size()
}
func (m *GmResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GmResp.DiscardUnknown(m)
}

var xxx_messageInfo_GmResp proto.InternalMessageInfo

func (m *GmResp) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type PlayerReconnect struct {
	RoomType        uint32       `protobuf:"varint,1,req,name=room_type,json=roomType" json:"room_type"`
	AnteLimit       uint64       `protobuf:"varint,2,req,name=ante_limit,json=anteLimit" json:"ante_limit"`
	AnteInit        uint64       `protobuf:"varint,3,req,name=ante_init,json=anteInit" json:"ante_init"`
	CurAnteInit     uint64       `protobuf:"varint,4,req,name=cur_ante_init,json=curAnteInit" json:"cur_ante_init"`
	CurAllAnte      uint64       `protobuf:"varint,5,req,name=cur_all_ante,json=curAllAnte" json:"cur_all_ante"`
	CurAnteMultiple uint32       `protobuf:"varint,6,req,name=cur_ante_multiple,json=curAnteMultiple" json:"cur_ante_multiple"`
	Round           uint32       `protobuf:"varint,7,req,name=round" json:"round"`
	CurSeatId       []int32      `protobuf:"zigzag32,8,rep,name=cur_seat_id,json=curSeatId" json:"cur_seat_id,omitempty"`
	Players         []*PlayerMsg `protobuf:"bytes,9,rep,name=players" json:"players,omitempty"`
}

func (m *PlayerReconnect) Reset()         { *m = PlayerReconnect{} }
func (m *PlayerReconnect) String() string { return proto.CompactTextString(m) }
func (*PlayerReconnect) ProtoMessage()    {}
func (*PlayerReconnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{10}
}
func (m *PlayerReconnect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerReconnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerReconnect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerReconnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerReconnect.Merge(dst, src)
}
func (m *PlayerReconnect) XXX_Size() int {
	return m.Size()
}
func (m *PlayerReconnect) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerReconnect.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerReconnect proto.InternalMessageInfo

func (m *PlayerReconnect) GetRoomType() uint32 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func (m *PlayerReconnect) GetAnteLimit() uint64 {
	if m != nil {
		return m.AnteLimit
	}
	return 0
}

func (m *PlayerReconnect) GetAnteInit() uint64 {
	if m != nil {
		return m.AnteInit
	}
	return 0
}

func (m *PlayerReconnect) GetCurAnteInit() uint64 {
	if m != nil {
		return m.CurAnteInit
	}
	return 0
}

func (m *PlayerReconnect) GetCurAllAnte() uint64 {
	if m != nil {
		return m.CurAllAnte
	}
	return 0
}

func (m *PlayerReconnect) GetCurAnteMultiple() uint32 {
	if m != nil {
		return m.CurAnteMultiple
	}
	return 0
}

func (m *PlayerReconnect) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PlayerReconnect) GetCurSeatId() []int32 {
	if m != nil {
		return m.CurSeatId
	}
	return nil
}

func (m *PlayerReconnect) GetPlayers() []*PlayerMsg {
	if m != nil {
		return m.Players
	}
	return nil
}

type PlayerMsg struct {
	SeatId    uint32   `protobuf:"varint,1,req,name=seat_id,json=seatId" json:"seat_id"`
	Name      string   `protobuf:"bytes,2,req,name=name" json:"name"`
	Avatar    uint32   `protobuf:"varint,3,req,name=avatar" json:"avatar"`
	Chips     uint64   `protobuf:"varint,4,req,name=chips" json:"chips"`
	IsBanker  bool     `protobuf:"varint,5,req,name=is_banker,json=isBanker" json:"is_banker"`
	IsYours   bool     `protobuf:"varint,6,req,name=is_yours,json=isYours" json:"is_yours"`
	AllAnte   uint64   `protobuf:"varint,7,req,name=all_ante,json=allAnte" json:"all_ante"`
	IsCheck   bool     `protobuf:"varint,8,opt,name=is_check,json=isCheck" json:"is_check"`
	Cards     []uint64 `protobuf:"varint,9,rep,name=cards" json:"cards,omitempty"`
	IsDiscard bool     `protobuf:"varint,10,opt,name=is_discard,json=isDiscard" json:"is_discard"`
	IsCmpLose bool     `protobuf:"varint,11,opt,name=is_cmp_lose,json=isCmpLose" json:"is_cmp_lose"`
}

func (m *PlayerMsg) Reset()         { *m = PlayerMsg{} }
func (m *PlayerMsg) String() string { return proto.CompactTextString(m) }
func (*PlayerMsg) ProtoMessage()    {}
func (*PlayerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_room_zjh_a117369630e20ca4, []int{11}
}
func (m *PlayerMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMsg.Merge(dst, src)
}
func (m *PlayerMsg) XXX_Size() int {
	return m.Size()
}
func (m *PlayerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMsg proto.InternalMessageInfo

func (m *PlayerMsg) GetSeatId() uint32 {
	if m != nil {
		return m.SeatId
	}
	return 0
}

func (m *PlayerMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerMsg) GetAvatar() uint32 {
	if m != nil {
		return m.Avatar
	}
	return 0
}

func (m *PlayerMsg) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *PlayerMsg) GetIsBanker() bool {
	if m != nil {
		return m.IsBanker
	}
	return false
}

func (m *PlayerMsg) GetIsYours() bool {
	if m != nil {
		return m.IsYours
	}
	return false
}

func (m *PlayerMsg) GetAllAnte() uint64 {
	if m != nil {
		return m.AllAnte
	}
	return 0
}

func (m *PlayerMsg) GetIsCheck() bool {
	if m != nil {
		return m.IsCheck
	}
	return false
}

func (m *PlayerMsg) GetCards() []uint64 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *PlayerMsg) GetIsDiscard() bool {
	if m != nil {
		return m.IsDiscard
	}
	return false
}

func (m *PlayerMsg) GetIsCmpLose() bool {
	if m != nil {
		return m.IsCmpLose
	}
	return false
}

func init() {
	proto.RegisterType((*GamePlayerInfoPush)(nil), "jdzjh.GamePlayerInfoPush")
	proto.RegisterType((*PlayerInfo)(nil), "jdzjh.PlayerInfo")
	proto.RegisterType((*GamePush)(nil), "jdzjh.GamePush")
	proto.RegisterType((*UserOperationReq)(nil), "jdzjh.UserOperationReq")
	proto.RegisterType((*UserOperationResp)(nil), "jdzjh.UserOperationResp")
	proto.RegisterType((*GameSettlementPush)(nil), "jdzjh.GameSettlementPush")
	proto.RegisterType((*GameResult)(nil), "jdzjh.GameResult")
	proto.RegisterType((*GmReq)(nil), "jdzjh.GmReq")
	proto.RegisterType((*PlayerCards)(nil), "jdzjh.PlayerCards")
	proto.RegisterType((*GmResp)(nil), "jdzjh.GmResp")
	proto.RegisterType((*PlayerReconnect)(nil), "jdzjh.PlayerReconnect")
	proto.RegisterType((*PlayerMsg)(nil), "jdzjh.PlayerMsg")
}
func (m *GamePlayerInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlayerInfoPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerInfos) > 0 {
		for _, msg := range m.PlayerInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoomZjh(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(len(m.Nickname)))
	i += copy(dAtA[i:], m.Nickname)
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.Avatar))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.Chips))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.IsYours))
	return i, nil
}

func (m *GamePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.KeyId))
	if len(m.ValueList) > 0 {
		for _, num := range m.ValueList {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMsgRoomZjh(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *UserOperationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOperationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.OperationKey))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.OperationValue))
	return i, nil
}

func (m *UserOperationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOperationResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.Result))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.OperationKey))
	return i, nil
}

func (m *GameSettlementPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameSettlementPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgRoomZjh(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.IsWinner {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.SeatId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64((uint64(m.Result)<<1)^uint64((m.Result>>63))))
	return i, nil
}

func (m *GmReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GmReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.RoomType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.PlayerNum))
	if len(m.PlayersCards) > 0 {
		for _, msg := range m.PlayersCards {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMsgRoomZjh(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerCards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCards) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.SeatId))
	if len(m.Cards) > 0 {
		for _, num := range m.Cards {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMsgRoomZjh(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *GmResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GmResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.Result))
	return i, nil
}

func (m *PlayerReconnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerReconnect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.RoomType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.AnteLimit))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.AnteInit))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.CurAnteInit))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.CurAllAnte))
	dAtA[i] = 0x30
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.CurAnteMultiple))
	dAtA[i] = 0x38
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.Round))
	if len(m.CurSeatId) > 0 {
		for _, num := range m.CurSeatId {
			dAtA[i] = 0x40
			i++
			x1 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x1 >= 1<<7 {
				dAtA[i] = uint8(uint64(x1)&0x7f | 0x80)
				x1 >>= 7
				i++
			}
			dAtA[i] = uint8(x1)
			i++
		}
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintMsgRoomZjh(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.SeatId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x18
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.Avatar))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.Chips))
	dAtA[i] = 0x28
	i++
	if m.IsBanker {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x30
	i++
	if m.IsYours {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x38
	i++
	i = encodeVarintMsgRoomZjh(dAtA, i, uint64(m.AllAnte))
	dAtA[i] = 0x40
	i++
	if m.IsCheck {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.Cards) > 0 {
		for _, num := range m.Cards {
			dAtA[i] = 0x48
			i++
			i = encodeVarintMsgRoomZjh(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x50
	i++
	if m.IsDiscard {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x58
	i++
	if m.IsCmpLose {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func encodeVarintMsgRoomZjh(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GamePlayerInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerInfos) > 0 {
		for _, e := range m.PlayerInfos {
			l = e.Size()
			n += 1 + l + sovMsgRoomZjh(uint64(l))
		}
	}
	return n
}

func (m *PlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoomZjh(uint64(m.Pos))
	l = len(m.Nickname)
	n += 1 + l + sovMsgRoomZjh(uint64(l))
	n += 1 + sovMsgRoomZjh(uint64(m.Avatar))
	n += 1 + sovMsgRoomZjh(uint64(m.Chips))
	n += 1 + sovMsgRoomZjh(uint64(m.IsYours))
	return n
}

func (m *GamePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoomZjh(uint64(m.Type))
	n += 1 + sovMsgRoomZjh(uint64(m.KeyId))
	if len(m.ValueList) > 0 {
		for _, e := range m.ValueList {
			n += 1 + sovMsgRoomZjh(uint64(e))
		}
	}
	return n
}

func (m *UserOperationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoomZjh(uint64(m.OperationKey))
	n += 1 + sovMsgRoomZjh(uint64(m.OperationValue))
	return n
}

func (m *UserOperationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoomZjh(uint64(m.Result))
	n += 1 + sovMsgRoomZjh(uint64(m.OperationKey))
	return n
}

func (m *GameSettlementPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovMsgRoomZjh(uint64(l))
		}
	}
	return n
}

func (m *GameResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovMsgRoomZjh(uint64(m.SeatId))
	n += 1 + sozMsgRoomZjh(uint64(m.Result))
	return n
}

func (m *GmReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoomZjh(uint64(m.RoomType))
	n += 1 + sovMsgRoomZjh(uint64(m.PlayerNum))
	if len(m.PlayersCards) > 0 {
		for _, e := range m.PlayersCards {
			l = e.Size()
			n += 1 + l + sovMsgRoomZjh(uint64(l))
		}
	}
	return n
}

func (m *PlayerCards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoomZjh(uint64(m.SeatId))
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			n += 1 + sovMsgRoomZjh(uint64(e))
		}
	}
	return n
}

func (m *GmResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoomZjh(uint64(m.Result))
	return n
}

func (m *PlayerReconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoomZjh(uint64(m.RoomType))
	n += 1 + sovMsgRoomZjh(uint64(m.AnteLimit))
	n += 1 + sovMsgRoomZjh(uint64(m.AnteInit))
	n += 1 + sovMsgRoomZjh(uint64(m.CurAnteInit))
	n += 1 + sovMsgRoomZjh(uint64(m.CurAllAnte))
	n += 1 + sovMsgRoomZjh(uint64(m.CurAnteMultiple))
	n += 1 + sovMsgRoomZjh(uint64(m.Round))
	if len(m.CurSeatId) > 0 {
		for _, e := range m.CurSeatId {
			n += 1 + sozMsgRoomZjh(uint64(e))
		}
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovMsgRoomZjh(uint64(l))
		}
	}
	return n
}

func (m *PlayerMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMsgRoomZjh(uint64(m.SeatId))
	l = len(m.Name)
	n += 1 + l + sovMsgRoomZjh(uint64(l))
	n += 1 + sovMsgRoomZjh(uint64(m.Avatar))
	n += 1 + sovMsgRoomZjh(uint64(m.Chips))
	n += 2
	n += 2
	n += 1 + sovMsgRoomZjh(uint64(m.AllAnte))
	n += 2
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			n += 1 + sovMsgRoomZjh(uint64(e))
		}
	}
	n += 2
	n += 2
	return n
}

func sovMsgRoomZjh(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgRoomZjh(x uint64) (n int) {
	return sovMsgRoomZjh(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GamePlayerInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlayerInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlayerInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerInfos = append(m.PlayerInfos, &PlayerInfo{})
			if err := m.PlayerInfos[len(m.PlayerInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			m.Avatar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avatar |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chips", wireType)
			}
			m.Chips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chips |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsYours", wireType)
			}
			m.IsYours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsYours |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nickname")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("avatar")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePush) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoomZjh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ValueList = append(m.ValueList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoomZjh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgRoomZjh
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ValueList) == 0 {
					m.ValueList = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgRoomZjh
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ValueList = append(m.ValueList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOperationReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOperationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOperationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationKey", wireType)
			}
			m.OperationKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationKey |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationValue", wireType)
			}
			m.OperationValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationValue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("operation_key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOperationResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOperationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOperationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationKey", wireType)
			}
			m.OperationKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationKey |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("result")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("operation_key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameSettlementPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameSettlementPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameSettlementPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &GameResult{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameResult) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWinner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWinner = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatId", wireType)
			}
			m.SeatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeatId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Result = int64(v)
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("is_winner")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("seat_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("result")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GmReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GmReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GmReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			m.RoomType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerNum", wireType)
			}
			m.PlayerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayersCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayersCards = append(m.PlayersCards, &PlayerCards{})
			if err := m.PlayersCards[len(m.PlayersCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("room_type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("player_num")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCards) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatId", wireType)
			}
			m.SeatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeatId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoomZjh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoomZjh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgRoomZjh
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cards) == 0 {
					m.Cards = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgRoomZjh
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("seat_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GmResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GmResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GmResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("result")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerReconnect) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerReconnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerReconnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			m.RoomType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnteLimit", wireType)
			}
			m.AnteLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnteLimit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnteInit", wireType)
			}
			m.AnteInit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnteInit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurAnteInit", wireType)
			}
			m.CurAnteInit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurAnteInit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurAllAnte", wireType)
			}
			m.CurAllAnte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurAllAnte |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurAnteMultiple", wireType)
			}
			m.CurAnteMultiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurAnteMultiple |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoomZjh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.CurSeatId = append(m.CurSeatId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoomZjh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgRoomZjh
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CurSeatId) == 0 {
					m.CurSeatId = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgRoomZjh
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.CurSeatId = append(m.CurSeatId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CurSeatId", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerMsg{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("room_type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ante_limit")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ante_init")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cur_ante_init")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cur_all_ante")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cur_ante_multiple")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("round")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatId", wireType)
			}
			m.SeatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeatId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			m.Avatar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avatar |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chips", wireType)
			}
			m.Chips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chips |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBanker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBanker = bool(v != 0)
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsYours", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsYours = bool(v != 0)
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllAnte", wireType)
			}
			m.AllAnte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllAnte |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCheck = bool(v != 0)
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoomZjh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgRoomZjh
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgRoomZjh
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cards) == 0 {
					m.Cards = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgRoomZjh
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDiscard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDiscard = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCmpLose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCmpLose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRoomZjh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgRoomZjh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("seat_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("avatar")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("chips")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("is_banker")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("is_yours")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("all_ante")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgRoomZjh(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgRoomZjh
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRoomZjh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsgRoomZjh
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgRoomZjh
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgRoomZjh(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgRoomZjh = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgRoomZjh   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg_room_zjh.proto", fileDescriptor_msg_room_zjh_a117369630e20ca4) }

var fileDescriptor_msg_room_zjh_a117369630e20ca4 = []byte{
	// 793 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdf, 0x6a, 0xfc, 0x44,
	0x14, 0xde, 0x64, 0xb3, 0xbb, 0xc9, 0xd9, 0xae, 0xed, 0x0e, 0x22, 0x83, 0xda, 0x6d, 0x1a, 0xa5,
	0x6c, 0x05, 0x8b, 0x88, 0xe0, 0xa5, 0xb8, 0x15, 0xca, 0x6a, 0xab, 0x25, 0xf5, 0x0f, 0x82, 0x10,
	0x63, 0x76, 0xda, 0x9d, 0x6e, 0x32, 0x89, 0x99, 0x49, 0x65, 0xfb, 0x04, 0x5e, 0xfa, 0x0a, 0xbe,
	0x4d, 0x2f, 0x7b, 0xe9, 0x95, 0x48, 0x8b, 0xe0, 0x63, 0xc8, 0x4c, 0xfe, 0xec, 0xa4, 0x45, 0xea,
	0xef, 0x2e, 0xf3, 0x9d, 0x2f, 0xe7, 0xcc, 0xf9, 0xce, 0x37, 0x07, 0x50, 0xc2, 0xaf, 0x82, 0x3c,
	0x4d, 0x93, 0xe0, 0xf6, 0x7a, 0x79, 0x94, 0xe5, 0xa9, 0x48, 0x51, 0xef, 0x7a, 0x71, 0x7b, 0xbd,
	0xf4, 0x3e, 0x07, 0x74, 0x12, 0x26, 0xe4, 0x3c, 0x0e, 0xd7, 0x24, 0x9f, 0xb3, 0xcb, 0xf4, 0xbc,
	0xe0, 0x4b, 0xf4, 0x11, 0x6c, 0x65, 0x0a, 0x09, 0x28, 0xbb, 0x4c, 0x39, 0x36, 0xdc, 0xee, 0x74,
	0xf8, 0xe1, 0xf8, 0x48, 0xfd, 0x73, 0xb4, 0x21, 0xfb, 0xc3, 0xac, 0xf9, 0xe6, 0xde, 0xef, 0x06,
	0xc0, 0x26, 0x86, 0xde, 0x80, 0x6e, 0xa6, 0xfe, 0x35, 0xa6, 0xa3, 0x99, 0x75, 0xf7, 0xe7, 0x5e,
	0xc7, 0x97, 0x00, 0x72, 0xc1, 0x66, 0x34, 0x5a, 0xb1, 0x30, 0x21, 0xd8, 0x74, 0xcd, 0xa9, 0x53,
	0x05, 0x1b, 0x14, 0xbd, 0x0d, 0xfd, 0xf0, 0x26, 0x14, 0x61, 0x8e, 0xbb, 0xae, 0xd9, 0xfc, 0x5c,
	0x61, 0xe8, 0x4d, 0xe8, 0x45, 0x4b, 0x9a, 0x71, 0x6c, 0xb9, 0xc6, 0xd4, 0xaa, 0x82, 0x25, 0x84,
	0xf6, 0xc0, 0xa6, 0x3c, 0x58, 0xa7, 0x45, 0xce, 0x71, 0x4f, 0x2b, 0x3c, 0xa0, 0xfc, 0x7b, 0x09,
	0x7a, 0x3f, 0x82, 0xad, 0xfa, 0x95, 0x5d, 0x62, 0xb0, 0xc4, 0x3a, 0x23, 0xd8, 0xd0, 0x8a, 0x28,
	0x04, 0xbd, 0x05, 0xfd, 0x15, 0x59, 0x07, 0x74, 0x81, 0x4d, 0xbd, 0xc6, 0x8a, 0xac, 0xe7, 0x0b,
	0xb4, 0x0b, 0x70, 0x13, 0xc6, 0x05, 0x09, 0x62, 0xca, 0x05, 0xee, 0xba, 0xdd, 0xa9, 0xe5, 0x3b,
	0x0a, 0x39, 0xa5, 0x5c, 0x78, 0x31, 0xec, 0x7c, 0xc3, 0x49, 0xfe, 0x55, 0x46, 0xf2, 0x50, 0xd0,
	0x94, 0xf9, 0xe4, 0x67, 0x74, 0x08, 0xa3, 0xb4, 0x3e, 0x07, 0x2b, 0xb2, 0x6e, 0x95, 0xdc, 0x6a,
	0x42, 0x5f, 0x90, 0x35, 0x7a, 0x1f, 0xb6, 0x37, 0x54, 0x95, 0x55, 0xdd, 0xa1, 0x26, 0xbf, 0xd6,
	0x04, 0xbf, 0x95, 0x31, 0xef, 0x07, 0x18, 0x3f, 0xa9, 0xc6, 0x33, 0xa9, 0x5f, 0x4e, 0x78, 0x11,
	0x8b, 0x56, 0x9d, 0x0a, 0x7b, 0x7e, 0x19, 0xf3, 0xbf, 0x2e, 0xe3, 0x7d, 0x52, 0xba, 0xe3, 0x82,
	0x08, 0x11, 0x93, 0x84, 0x30, 0xa1, 0x74, 0x3b, 0xd4, 0xd2, 0xeb, 0xbe, 0x90, 0x54, 0x5f, 0x05,
	0xea, 0x5a, 0x5e, 0x0c, 0xb0, 0x41, 0xd1, 0x3e, 0x38, 0x94, 0x07, 0xbf, 0x50, 0xc6, 0x48, 0xae,
	0xae, 0x66, 0xd7, 0xa3, 0xa7, 0xfc, 0x3b, 0x85, 0xa2, 0x5d, 0x18, 0x70, 0x12, 0x8a, 0x52, 0x7a,
	0xb3, 0x91, 0xbe, 0x2f, 0xc1, 0xf9, 0x42, 0xeb, 0x4c, 0x3a, 0x03, 0xb5, 0x3b, 0xf3, 0x7e, 0x35,
	0xa0, 0x77, 0x92, 0x48, 0xc1, 0xf7, 0xc1, 0x51, 0x7e, 0x7f, 0x36, 0x5f, 0x5b, 0xc2, 0x5f, 0xcb,
	0x19, 0xbf, 0x03, 0x50, 0x79, 0x9c, 0x15, 0x49, 0x4b, 0x03, 0xa7, 0xc4, 0xbf, 0x2c, 0x12, 0xf4,
	0x31, 0x8c, 0xca, 0x03, 0x0f, 0xa2, 0x30, 0x5f, 0x48, 0x53, 0xc9, 0x8e, 0x51, 0xeb, 0x25, 0x1c,
	0xcb, 0x88, 0x5f, 0xbd, 0x18, 0xae, 0x4e, 0xde, 0x0c, 0x86, 0x5a, 0x50, 0x6f, 0xab, 0x35, 0x92,
	0xaa, 0xad, 0xd7, 0xa1, 0x57, 0xa6, 0x37, 0x95, 0x9b, 0xca, 0x83, 0x77, 0x00, 0x7d, 0xd9, 0xcd,
	0x4b, 0x03, 0xf5, 0xfe, 0x31, 0x61, 0xbb, 0x2c, 0xe6, 0x93, 0x28, 0x65, 0x8c, 0x44, 0xe2, 0x7f,
	0x0a, 0x10, 0x32, 0x21, 0x6d, 0x9c, 0x50, 0xd1, 0x52, 0xdb, 0x91, 0xf8, 0xa9, 0x84, 0x65, 0x1e,
	0x45, 0xa2, 0x8c, 0x96, 0x9a, 0xd7, 0x1c, 0x5b, 0xc2, 0x73, 0x46, 0x05, 0x9a, 0xc2, 0x28, 0x2a,
	0xf2, 0x60, 0x43, 0xb3, 0x34, 0xda, 0x30, 0x2a, 0xf2, 0x4f, 0x6b, 0xe6, 0x01, 0x6c, 0x29, 0x66,
	0x1c, 0x2b, 0x36, 0xee, 0x69, 0x44, 0x90, 0xc4, 0x38, 0x96, 0x5c, 0xf4, 0x01, 0x8c, 0x9b, 0x8c,
	0x49, 0x11, 0x0b, 0x9a, 0xc5, 0x04, 0xf7, 0xb5, 0x26, 0xb6, 0xab, 0xac, 0x67, 0x55, 0x50, 0xee,
	0x84, 0x3c, 0x2d, 0xd8, 0x02, 0x0f, 0x34, 0x56, 0x09, 0xa1, 0x09, 0xc8, 0x4b, 0x04, 0xb5, 0xfe,
	0xb6, 0xdb, 0x9d, 0x8e, 0x7d, 0x27, 0x2a, 0xf2, 0x8b, 0x52, 0xfc, 0xf7, 0x60, 0x50, 0x8d, 0x0e,
	0x3b, 0x6a, 0xba, 0x3b, 0xad, 0xe9, 0x9e, 0xf1, 0x2b, 0xbf, 0x26, 0x78, 0x7f, 0x9b, 0xe0, 0x34,
	0xf0, 0x4b, 0x53, 0xc5, 0x60, 0x3d, 0x5b, 0x72, 0xd6, 0xab, 0x2d, 0x38, 0xf3, 0xe9, 0x82, 0x2b,
	0x9f, 0xd0, 0x4f, 0x21, 0x5b, 0x91, 0x5c, 0xe9, 0xa7, 0x3d, 0xa1, 0x99, 0x42, 0x5b, 0x3b, 0xb0,
	0xaf, 0x31, 0xea, 0x1d, 0x28, 0x09, 0xcd, 0x08, 0x06, 0x5a, 0x89, 0x41, 0x58, 0xe9, 0x5f, 0x66,
	0x88, 0x96, 0x24, 0x5a, 0x61, 0xdb, 0x35, 0xf4, 0x0c, 0xc7, 0x12, 0xdc, 0xf8, 0xd5, 0xd1, 0xfc,
	0x2a, 0x0d, 0x45, 0x79, 0xb0, 0xa0, 0x5c, 0x1e, 0x31, 0x68, 0x3f, 0x3a, 0x94, 0x7f, 0x56, 0xc2,
	0xe8, 0x5d, 0x18, 0xca, 0xdc, 0x49, 0x16, 0xc4, 0x29, 0x27, 0x78, 0xd8, 0x66, 0x1d, 0x27, 0xd9,
	0x69, 0xca, 0xc9, 0x0c, 0xdf, 0x3d, 0x4c, 0x8c, 0xfb, 0x87, 0x89, 0xf1, 0xd7, 0xc3, 0xc4, 0xf8,
	0xed, 0x71, 0xd2, 0xb9, 0x7f, 0x9c, 0x74, 0xfe, 0x78, 0x9c, 0x74, 0xfe, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x80, 0x97, 0x24, 0xd2, 0xcc, 0x06, 0x00, 0x00,
}
